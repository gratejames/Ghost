#SHARE CursorNewline
CursorNewline:
	PSH R1
	LD R1 $Cursor		; Load the cursor position
	ADD R1 0x0040		; Reset the cursor to the next line
	AND R1 0xffc0
	ST R1 $Cursor

	CLT R1 0x1000
	JMPC CursorNewline_enoughRoom	
		CALL ScrollScreen ; Scroll screen if there isn't enough room
		LD R1 $LastCursor
		SUB R1 0x40
		ST R1 $LastCursor
	CursorNewline_enoughRoom:
	POP R1
	RET

; R0 -> Character
#SHARE SetAtCursor
SetAtCursor:
	PSH R1
	PSH R2
	PSH R3
	LD R1 $Cursor
	AND R1 0x003f		; X Pos
	LD R2 $Cursor
	SHR R2 6			; Y Pos
	LD R3 Font			; Font Address
	INT 0x5f
	POP R3
	POP R2
	POP R1
	RET

; R0 -> Character
#SHARE PrintAtCursor
PrintAtCursor:
	PSH R1
	LD R1 $Cursor		; Load the cursor position
	ADD R1 CharMem
	DD R1
	STD R0
	CALL SetAtCursor
	LD R1 $Cursor
	INC R1
	ST R1 $Cursor
	POP R1
	RET

; R0 -> value
#SHARE PrintNumberAtCursor
PrintNumberAtCursor:
	PSH R1
	ST 0 $PrintNumberAtCursor_Thousands
	ST 0 $PrintNumberAtCursor_Hundreds
	ST 0 $PrintNumberAtCursor_Tens
	ST 0 $PrintNumberAtCursor_Ones

	PrintNumberAtCursor_ThousandsLoop:
		CLT R0 1000
		JMPC PrintNumberAtCursor_HundredsLoop
		SUB R0 1000
		LD R1 $PrintNumberAtCursor_Thousands
		INC R1
		ST R1 $PrintNumberAtCursor_Thousands
		JMP PrintNumberAtCursor_ThousandsLoop

	PrintNumberAtCursor_HundredsLoop:
		CLT R0 100
		JMPC PrintNumberAtCursor_TensLoop
		SUB R0 100
		LD R1 $PrintNumberAtCursor_Hundreds
		INC R1
		ST R1 $PrintNumberAtCursor_Hundreds
		JMP PrintNumberAtCursor_HundredsLoop

	PrintNumberAtCursor_TensLoop:
		CLT R0 10
		JMPC PrintNumberAtCursor_OnesLoop
		SUB R0 10
		LD R1 $PrintNumberAtCursor_Tens
		INC R1
		ST R1 $PrintNumberAtCursor_Tens
		JMP PrintNumberAtCursor_TensLoop

	PrintNumberAtCursor_OnesLoop:
		CLT R0 1
		JMPC PrintNumberAtCursor_DoneLoops
		SUB R0 1
		LD R1 $PrintNumberAtCursor_Ones
		INC R1
		ST R1 $PrintNumberAtCursor_Ones
		JMP PrintNumberAtCursor_OnesLoop

	PrintNumberAtCursor_DoneLoops:
	LD R0 $PrintNumberAtCursor_Thousands
	ADD R0 '0'
	CALL PrintAtCursor
	LD R0 $PrintNumberAtCursor_Hundreds
	ADD R0 '0'
	CALL PrintAtCursor
	LD R0 $PrintNumberAtCursor_Tens
	ADD R0 '0'
	CALL PrintAtCursor
	LD R0 $PrintNumberAtCursor_Ones
	ADD R0 '0'
	CALL PrintAtCursor
	POP R1
	RET

	PrintNumberAtCursor_Thousands: .db 0
	PrintNumberAtCursor_Hundreds: .db 0
	PrintNumberAtCursor_Tens: .db 0
	PrintNumberAtCursor_Ones: .db 0

; R0 -> length
; R1 -> ptr
#SHARE PrintBufAtCursor
PrintBufAtCursor:
	PSH R0
	CEZ R0
	DD R1
	LDD R0
	JMPC PrintBufAtCursorEnd
		PSH R1
		CALL PrintAtCursor
		POP R1
		INC R1
		POP R0
		DEC R0
		JMP PrintBufAtCursor
	PrintBufAtCursorEnd:
		POP R0
		RET

; R1 -> ptr
#SHARE PrintStringAtCursor
PrintStringAtCursor:
	DD R1
	LDD R0
	CEZ R0
	JMPC PrintStringAtCursorEnd
		PSH R1
		CE R0 0x0a
		CALLC CursorNewline
		CNE R0 0x0a
		CALLC PrintAtCursor
	POP R1
	INC R1
	JMP PrintStringAtCursor
	PrintStringAtCursorEnd:
		RET

#SHARE PrintLineAtCursor
PrintLineAtCursor:
	CALL PrintStringAtCursor
	CALL CursorNewline
	RET

#SHARE RefreshDisplay
RefreshDisplay:
	PSH
	LD R0 0
	RefreshDisplay_loop:
		STZ R1
		AND R1 0x003f		; X Pos
		STZ R2
		SHR R2 6			; Y Pos
		LD R3 Font
		PSH R0
		ADD R0 CharMem
		DD R0
		LDD R0
		CEZ R0
		CALLC RefreshDisplay_blank
		INT 0x5f
		POP R0
		INC R0
		CNE R0 0x1000
		JMPC RefreshDisplay_loop
	POP
	RET
	RefreshDisplay_blank:
		LD R0 ' '
		RET

; R1 -> ptr to zero or space terminated number string
; R0 <- error code (Nominal 0)
; R1 <- pointer to where number ended
; R2 <- value
#SHARE parseUserNumberInput
parseUserNumberInput:
	PSH R3
	DD R1
	LDD R2
	CEZ R2
	JMPC parseUserNumberInput_noinput
	CE R2 ' '
	JMPC parseUserNumberInput_noinput
	; First character can either be 0 for 0x or a digit between 1 and 9
	CE R2 '0'
	JMPC parseUserNumberInput_hex

	; Decimal
	DBGC 'D'
	DBGC 0xa
	LD R0 0
	parseUserNumberInput_decimalLoop:
		CEZ R2
		JMPC parseUserNumberInput_decimalDone
		CE R2 ' '
		JMPC parseUserNumberInput_decimalDone
		SUB R2 '0'
		CGT R2 9
		JMPC parseUserNumberInput_nonnumeric
		CALL parseUserNumberInput_SHLbase10
		ADD R2 ; Add the new value to the old value*10

		INC R1
		DD R1
		LDD R2
		JMP parseUserNumberInput_decimalLoop

	parseUserNumberInput_hex:
	INC R1
	DD R1
	LDD R2
	CEZ R2
	JMPC parseUserNumberInput_hex_nevermind_zero
	CE R2 ' '
	JMPC parseUserNumberInput_hex_nevermind_zero
	CNE R2 'x'
	JMPC parseUserNumberInput_unknownbase

	; hex
	DBGC 'H'
	DBGC 0xa
	LD R0 0
	parseUserNumberInput_hex_loop:
		INC R1
		DD R1
		LDD R2
		CEZ R2
		JMPC parseUserNumberInput_hexDone
		CE R2 ' '
		JMPC parseUserNumberInput_hexDone
		SUB R2 '0'
		CGT R2 9
		CALLC parseUserNumberInput_hex_nonnumeric
		SHL R0 4 ; Multiply R0 by 16
		ADD R2 ; Add the new value to the old value*10
		JMP parseUserNumberInput_hex_loop

	parseUserNumberInput_hex_nonnumeric:
		ADD R2 '0'
		SUB R2 'a'
		CLT R2 6 ; a-f
		JMPC parseUserNumberInput_hex_lowercase
		; uppercase or bust
		ADD R2 'a'
		SUB R2 'A'
		CGT R2 5 ; A-F
		JMPC parseUserNumberInput_hex_nonhexchar
		; uppercase
		parseUserNumberInput_hex_lowercase:
		; R2 now holds char value with a being zero
		ADD R2 10
		RET

	parseUserNumberInput_hex_nevermind_zero:
	LD R0 0
	parseUserNumberInput_decimalDone:
	parseUserNumberInput_hexDone:
	STZ R2
	LD R0 0 ; no error
	POP R3
	RET
	; Multiplies R0 by 10
	parseUserNumberInput_SHLbase10:
		PSH R1
		PSH R2
		LD R2 9
		STZ R1
		parseUserNumberInput_SHLbase10_loop:
			ADD R1 ; R0 = R0 + R1
			DEC R2
			CNZ R2
			JMPC parseUserNumberInput_SHLbase10_loop
		POP R2
		POP R1
		RET

	parseUserNumberInput_noinput:
		LD R0 0x0001
		POP R3
		RET
	parseUserNumberInput_nonnumeric:
		LD R0 0x0002
		POP R3
		RET
	parseUserNumberInput_unknownbase:
		LD R0 0x0003
		POP R3
		RET
	parseUserNumberInput_hex_nonhexchar:
		POP R0
		LD R0 0x0004
		POP R3
		RET

; R0 -> error number
; R1 -> error message table
#SHARE PrintErrorMessage
PrintErrorMessage:
	PSH
	PSH R1
	POP R3
	PrintErrorMessage_loop:
		; check if we have the right error
		CEZ R0
		JMPC PrintErrorMessage_found

		; check if current message is 0 (table is exhausted)
		DD R1
		LDD R2
		CEZ R2
		JMPC PrintErrorMessage_notfound

		; skip message
		PrintErrorMessage_skip:
			DD R1
			LDD R2
			INC R1
			CNZ R2
			JMPC PrintErrorMessage_skip


		; decrement error number
		DEC R0

		JMP PrintErrorMessage_loop


	PrintErrorMessage_notfound:
	PSH R3
	POP R1
	PrintErrorMessage_found:
	; R1: pointer to string
	CALL PrintLineAtCursor
	POP
	RET

#SHARE ClearScreen
ClearScreen:
	ST 0 $Cursor
	; LD R2 CharMem
	LD R3 0x1000

	ClearScreen_loop:
		LD R0 ' '
		CALL PrintAtCursor ; Clear display
		; DD R2
		; STD ' '
		; INC R2 ; Clear char mem
		DEC R3
		CNZ R3
		JMPC ClearScreen_loop
	ST 0 $Cursor
	RET

#SHARE BlankScreen
BlankScreen:
	PSH
	LD R2 0xb000

	BlankScreen_loop:
		DD R2
		STD 0
		INC R2
		CNE R2 0xefff
		JMPC BlankScreen_loop

	POP
	RET

; Uses none
#SHARE ScrollScreen
ScrollScreen:
	PSH R1
	LD R1 $Cursor
	CLT R1 0x41
	POP R1
	JMPC ClearScreen
	PSH
	; LD R1 CharMem
	LD R2 CharMem
	ADD R2 0x40
	LD R3 0x0fc0
	LD R0 $Cursor
	SUB R0 0x40
	PSH R0
	ST 0x0000 $Cursor
	ScrollScreen_Loop:
		DD R2
		LDD R0
		CNZ R0
		JMPC ScrollScreen_Loop_notzero ; Display zeroes as spaces
			; Manually run PrintAtCursor, but split
			; so that we can write a zero but show a space
			LD R1 $Cursor
			ADD R1 CharMem
			DD R1
			STD R0
			LD R0 ' '
			CALL SetAtCursor
			LD R1 $Cursor
			INC R1
			ST R1 $Cursor
		JMP ScrollScreen_Loop_donewithzero
		ScrollScreen_Loop_notzero:
		CALL PrintAtCursor
		ScrollScreen_Loop_donewithzero:
		INC R2
		DEC R3
		CNZ R3
		JMPC ScrollScreen_Loop
	LD R3 0x0040
	LD R0 ' '
	ScrollScreen_Loop2:
		CALL PrintAtCursor
		DEC R3
		CNZ R3
		JMPC ScrollScreen_Loop2
	POP R0
	ST R0 $Cursor
	POP
	RET
