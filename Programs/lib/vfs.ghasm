; R0 -> Address to driver table
; R0 <- Table entry (Disk Number) on success, 0xffff on fail
; Destroys: R1, R2
#SHARE vfs_register
vfs_register:
	LD R1 0 ; Counter
	vfs_register_loop:
		CE R1 DiskTableSize
		JMPC driverTable_full
		PSH R1
		ADD R1 DiskTable
		DD R1
		LDD R1
		CNZ R1
		POP R1
		INC R1
		JMPC vfs_register_loop
	; R1 is zero
	DEC R1
	PSH R1
	ADD R1 DiskTable
	DD R1
	STD R0
	POP R0
	; DBG R0
	; DBGC 0x0a
	RET
	driverTable_full:
		LD R0 0xffff ; -1, no space in driver table
		RET

; R0 -> Address to file functions table
; R0 <- Global file table entry on success, 0xffff on fail
; Destroys: R1
#SHARE vfs_register_fileptr
vfs_register_fileptr:
	LD R1 0 ; Counter
	vfs_register_fileptr_loop:
		CE R1 FileTableSize
		JMPC vfs_register_table_full
		PSH R1
		ADD R1 FileTable
		DD R1
		LDD R1
		CNZ R1
		POP R1
		INC R1
		JMPC vfs_register_fileptr_loop
	; R1 is zero
	DEC R1
	PSH R1
	ADD R1 FileTable
	DD R1
	STD R0
	POP R0
	RET
	vfs_register_table_full:
		LD R0 0xffff
		RET

; R0 -> Address to file functions table
#SHARE vfs_unregister_fileptr
vfs_unregister_fileptr:
	ADD R0 FileTable
	DD R0
	STD 0
	RET

; R0 Disk number
; R1 ptr to absolute path
; R2 ptr to new folder name
#SHARE vfs_mkdir
vfs_mkdir:
	PSH R0
	ADD R0 DiskTable
	DD R0
	LDD R0 ; Load the pointer to the drivers
	; don't need to add anything since mkdir is the first entry
	DD R0
	LDD R0 ; Load the pointer to the mkdir function
	DD R0
	POP R0
	CALD
	RET

; R0 Disk number
; R1 ptr to absolute path
#SHARE vfs_list
vfs_list:
	PSH R0
	ADD R0 DiskTable
	DD R0
	LDD R0 ; Load the pointer to the drivers
	ADD R0 1 ; Load the second driver: list
	DD R0
	LDD R0 ; Load the pointer to the list function
	DD R0
	POP R0
	CALD
	RET

; R0 Disk number
; R1 ptr to absolute path
; R2 ptr to new folder name
#SHARE vfs_rmdir
vfs_rmdir:
	PSH R0
	ADD R0 DiskTable
	DD R0
	LDD R0 ; Load the pointer to the drivers
	ADD R0 2 ; Load the third driver: rmdir
	DD R0
	LDD R0 ; Load the pointer to the rmdir function
	DD R0
	POP R0
	CALD
	RET

; R0 -> Disk number
; R0 <- Error code (Nominal 0)
; R1 -> ptr to absolute path
; R1 <- File Pointer
; R2 -> ptr to file name
; R3 -> fopen mode (1 to create if not exist, else 0)
#SHARE vfs_fopen
vfs_fopen:
	PSH R0
	ADD R0 DiskTable
	DD R0
	LDD R0 ; Load the pointer to the drivers
	ADD R0 3 ; Load the fourth driver: fopen
	DD R0
	LDD R0 ; Load the pointer to the fopen function
	DD R0
	POP R0
	CALD
	RET

; R0 -> Disk number
; R0 <- Error code (Nominal 0)
; R1 -> ptr to absolute path
; R1 <- File Pointer
; R2 -> ptr to new file name
#SHARE vfs_rm
vfs_rm:
	PSH R0
	ADD R0 DiskTable
	DD R0
	LDD R0 ; Load the pointer to the drivers
	ADD R0 4 ; Load the fifth driver: rm
	DD R0
	LDD R0 ; Load the pointer to the rm function
	DD R0
	POP R0
	CALD
	RET

; R0 -> File Pointer
; R0 <- Error code (Nominal 0)
#SHARE vfs_fclose
vfs_fclose:
	PSH R0
	ADD R0 FileTable
	DD R0
	LDD R0 ; Load the pointer to the functions
	ADD R0 0 ; Load the first function: fclose
	DD R0
	LDD R0 ; Load the pointer to the fclose function
	DD R0
	POP R0
	CALD
	RET

; R0 -> File Pointer
; R0 <- Error code (Nominal 0)
; R1 -> Buffer to read from
; R1 <- bytes read
; R2 -> Amount of bytes to read
#SHARE vfs_fwrite
vfs_fwrite:
	PSH R0
	ADD R0 FileTable
	DD R0
	LDD R0 ; Load the pointer to the functions
	ADD R0 1 ; Load the second function: fwrite
	DD R0
	LDD R0 ; Load the pointer to the fwrite function
	DD R0
	POP R0
	CALD
	RET

; R0 -> File Pointer
; R0 <- Error code (Nominal 0)
; R1 -> Buffer to read into
; R1 <- bytes read
; R2 -> Amount of bytes to read
#SHARE vfs_fread
vfs_fread:
	PSH R0
	ADD R0 FileTable
	DD R0
	LDD R0 ; Load the pointer to the functions
	ADD R0 2 ; Load the third function: fread
	DD R0
	LDD R0 ; Load the pointer to the fread function
	DD R0
	POP R0
	CALD
	RET

; R0 -> File Pointer
; R0 <- Error code (Nominal 0)
; R1 -> position to seek to
#SHARE vfs_fseek
vfs_fseek:
	PSH R0
	ADD R0 FileTable
	DD R0
	LDD R0 ; Load the pointer to the functions
	ADD R0 3 ; Load the fourth function: fseek
	DD R0
	LDD R0 ; Load the pointer to the fseek function
	DD R0
	POP R0
	CALD
	RET

#DEF DiskTableSize 4
; 1 byte pointers to each drivers table
DiskTable:
.dz 1 * DiskTableSize

#DEF FileTableSize 6
; 1 byte pointers to each file functions table
FileTable:
.dz 1 * FileTableSize
