; R0 -> Address to driver table
; R0 <- Table entry (Disk Number) on success, 0xffff on fail
; Destroys: R1, R2
vfs_register:
	LD R2 0 ; Counter
	vfs_register_loop:
		CE R2 $DriversTableSize
		JMPC driverTable_full
		PSH R2
		POP R1
		ADD R1 DriversTable
		DD R1
		LDD R1
		CNZ R1
		INC R2
		JMPC vfs_register_loop
	; R1 is zero
	DEC R2
	PSH R2
	ADD R2 DriversTable
	DD R2
	STD R0
	POP R0
	; DBG R0
	; DBGC 0x0a
	RET
	driverTable_full:
		LD R0 0xffff ; -1, no space in driver table
		RET

; R0 Disk number
; R1 ptr to path
; R2 ptr to new folder name
vfs_mkdir:
	PSH R0
	ADD R0 DriversTable
	DD R0
	LDD R0 ; Load the pointer to the drivers
	; don't need to add anything since mkdir is the first entry
	DD R0
	LDD R0 ; Load the pointer to the mkdir function
	DD R0
	POP R0
	CALD
	RET

; R0 Disk number
; R1 ptr to path
vfs_list:
	PSH R0
	ADD R0 DriversTable
	DD R0
	LDD R0 ; Load the pointer to the drivers
	ADD R0 1 ; Load the second driver: list
	DD R0
	LDD R0 ; Load the pointer to the list function
	DD R0
	POP R0
	CALD
	; LD R0 $0xf000
	; DBG R0

	RET



DriversTableSize: .db 2
; 1 byte pointers to each drivers table
DriversTable:
.dz 1 * 2