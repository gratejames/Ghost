; R0 -> Address to driver table
; R0 <- Table entry (Disk Number) on success, 0xffff on fail
; Destroys: R1, R2
#SHARE vfs_register
vfs_register:
	LD R1 0 ; Counter
	vfs_register_loop:
		CE R1 DiskTableSize
		JMPC driverTable_full
		PSH R1
		ADD R1 DiskTable
		DD R1
		LDD R1
		CNZ R1
		POP R1
		INC R1
		JMPC vfs_register_loop
	; R1 is zero
	DEC R1
	PSH R1
	ADD R1 DiskTable
	DD R1
	STD R0
	POP R0
	; DBG R0
	; DBGC 0x0a
	RET
	driverTable_full:
		LD R0 0xffff ; -1, no space in driver table
		RET

; R0 Disk number
; R1 ptr to absolute path
; R2 ptr to new folder name
#SHARE vfs_mkdir
vfs_mkdir:
	PSH R0
	ADD R0 DiskTable
	DD R0
	LDD R0 ; Load the pointer to the drivers
	; don't need to add anything since mkdir is the first entry
	DD R0
	LDD R0 ; Load the pointer to the mkdir function
	DD R0
	POP R0
	CALD
	RET

; R0 Disk number
; R1 ptr to absolute path
#SHARE vfs_list
vfs_list:
	PSH R0
	ADD R0 DiskTable
	DD R0
	LDD R0 ; Load the pointer to the drivers
	ADD R0 1 ; Load the second driver: list
	DD R0
	LDD R0 ; Load the pointer to the list function
	DD R0
	POP R0
	CALD
	RET

; R0 Disk number
; R1 ptr to absolute path
; R2 ptr to new folder name
#SHARE vfs_rmdir
vfs_rmdir:
	PSH R0
	ADD R0 DiskTable
	DD R0
	LDD R0 ; Load the pointer to the drivers
	ADD R0 2 ; Load the third driver: rmdir
	DD R0
	LDD R0 ; Load the pointer to the list function
	DD R0
	POP R0
	CALD
	RET



#DEF DiskTableSize 4
; 1 byte pointers to each drivers table
.dz 1 * DiskTableSize

#DEF FileTableSize 6
