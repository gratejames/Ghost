; R0 -> address
; R0 <- Disk Number
; R1 size
; Destroys R2
#SHARE ramdisk_init
ramdisk_init:
	PSH R0
	PSH R1
	LD R0 ramdisk_DriverTable
	CALL vfs_register
	POP R2
	POP R1
	CALL ramdisk_register
	CALL ramdisk_format
	RET


; R0 -> disk number
; R1 -> address
; R2 -> size
; R0 <- Table entry on success, 0xffff on fail
ramdisk_register:
	; The disk number can be zero, 
	; so we need to check the ramdisk address to verify empty
	PSH
	LD R2 0 ; Counter
	ramdisk_register_loop:
		CE R2 ramdisk_TableSize
		JMPC ramdisk_register_full
		PSH R2
		POP R1
		SHL R1 2 ; Multiply by 4, the size of each table entry
		ADD R1 ramdisk_Table
		ADD R1 1 ; Read from the address instead
		DD R1
		LDD R1
		CNZ R1
		INC R2
		JMPC ramdisk_register_loop
	DEC R2
	LDZ R2 ; Save the table entry for later

	SHL R2 2 ; Multiply by 4, the size of each table entry
	ADD R2 ramdisk_Table

	POP R3 ; Recover R3 - unused, but not destroyed
	POP R1 ; Size
	ADD R2 2
	DD R2
	STD R1
	POP R1 ; Address
	SUB R2 1
	DD R2
	STD R1
	POP R1 ; Disk Number
	SUB R2 1
	DD R2
	STD R1

	RET
	ramdisk_register_full:
		POP
		LD R0 0xffff ; -1, no space in driver table
		RET

; R0 -> Table entry in ramdisk_Table
ramdisk_format:
	SHL R0 2
	ADD R0 ramdisk_Table
	INC R0
	DD R0
	LDD R1 ; Disk address
	INC R0
	DD R0
	LDD R0 ; Disk size

	SHR R0 7 ; Amount of pages = size / 128
	DEC R0 ; Header page already used!

	; Write the header:
	DD R1
	STD 'G' ; Magic byte
	INCD
	STD 0 ; Version number
	INCD
	STD 0 ; Bitmap size
	INCD
	STD R0 ; Free pages count
	INCD
	; Zero the bitmap
	STD 0x8000 ; Except the first page is the header!
	INCD
	LD R0 1
	ramdisk_format_bitmap_loop:
		STD 0x0000
		INCD
		INC R0
		CLT R0 32
		JMPC ramdisk_format_bitmap_loop
	ADD R1 12
	RET

ramdisk_compareNames_counter: .db 0

; R0 -> first name
; R2 -> second name
; Returns in a conditional
ramdisk_compareNames:
	PSH
	STZ R1
	ST 12 $ramdisk_compareNames_counter
	ramdisk_compareNames_loop:
		DD R1
		LDD R0
		DD R2
		LDD R3
		INC R1
		INC R2 ; Increment Ptrs for next time 'round
		PSH R0
			LD R0 $ramdisk_compareNames_counter
			DEC R0
			ST R0 $ramdisk_compareNames_counter
		POP R0
		; R0 is character
		; R1 is ptr
		; R2 is ptr
		; R3 is character
		PSH R0
			XOR R3 ; Compare R0 and R3
			CEZ R0
		POP R0
		JMPC ramdisk_compareNames_match
		ramdisk_compareNames_notmatch:
			LD R1 0
			CNZ R1 ; Return False
			POP
			RET

		ramdisk_compareNames_match:
			; Ok, so the characters match
			; If the counter is at zero, we're done. Else, Continue
			CNZ $ramdisk_compareNames_counter
			JMPC ramdisk_compareNames_loop
			; Fall through to the case were they all match!
			LD R1 0
			CEZ R1 ; Return True
			POP
			RET

ramdisk_haschild:
	PSH R0
	CALL ramdisk_getchild
	CALL invert_conditional_flag
	POP R0
	RET

invert_conditional_flag:
	PSH R0
	JMPC invert_flag_set
	; flag not set
	LD R0 0
	CEZ R0
	POP R0
	RET
	invert_flag_set:
	; flag set
	LD R0 0
	CNZ R0
	POP R0
	RET

; Checks if the given page has the given child name
; Conditional flag set on error
; R1 -> page number
; R2 -> pointer to name to check
; R3 -> address of fs start
; R0 <- pointer to child
ramdisk_getchild:
	PSH R1
	PSH R2
	PSH R3
	LDZ R1
	SHL R0 7
	ADD R3
	STZ R3
	; Address of page (R3) = fs start + Page number * page size	
	CNZ R1
	LD R1 0 ; Offset within page
	JMPC ramdisk_getchild_loop
	LD R1 48 ; First page has an offset of 48, not 0
	ramdisk_getchild_loop:
		CE R1 128
		JMPC ramdisk_getchild_noMatch
		; R1: Page offset of the current entry
		; R3: Address of the page start
		LDZ R3
		ADD R1
		ADD R1 16
		; R0: Address of current entry
		PSH R0
		DD R0
		LDD R0		; Read entry flags
		AND R0 0b01
		CEZ R0		; If it's not allocated...
		POP R0
		JMPC ramdisk_getchild_loop ; ... skip to the next
		; Now we know the entry is allocated.
		ADD R0 2
		; R0 has the address of the current entry's name
		; R2 has the address of the name to check
		CALL ramdisk_compareNames
		JMPC ramdisk_getchild_match
		; Otherwise, loop
		JMP ramdisk_getchild_loop

	ramdisk_getchild_match:
	SUB R0 2 ; Walk back from name pointer to entry pointer
	LD R1 0
	CNZ R1 ; Return False
	POP R3
	POP R2
	POP R1
	RET
	ramdisk_getchild_noMatch:
	LD R0 0
	CEZ R0 ; Return True
	POP R3
	POP R2
	POP R1
	RET

; Checks if the given page has any free entries
; Returns in conditions register
; R1 -> page number
; R3 -> address of fs start
ramdisk_isfull:
	PSH R0
	CALL ramdisk_firstFree ; True if there's an error, ie the dir is full
	POP R0
	RET

; Gets a pointer to the first free entry on the given page
; Conditional flag set on error
; R1 -> page number
; R3 -> address of fs start
; R0 <- pointer to new entry
ramdisk_firstFree:
	PSH R1
	PSH R2
	PSH R3
	LDZ R1
	SHL R0 7
	ADD R3
	STZ R3
	; Address of page (R3) = fs start + Page number * page size	
	CNZ R1
	LD R1 0 ; Offset within page
	JMPC ramdisk_firstFree_loop
	LD R1 48 ; First page has an offset of 48, not 0
	ramdisk_firstFree_loop:
		CE R1 128
		JMPC ramdisk_firstFree_full
		; R1: Page offset of the current entry
		; R3: Address of the page start
		LDZ R3
		ADD R1
		ADD R1 16
		; R0: Address of current entry
		PSH R0
		DD R0
		LDD R0		; Read entry flags
		AND R0 0b01
		CEZ R0		; If it's not allocated...
		POP R0
		JMPC ramdisk_firstFree_success ; ... we're done

		JMP ramdisk_firstFree_loop

	ramdisk_firstFree_success:
	LD R1 0
	CNZ R1 ; Return False
	POP R3
	POP R2
	POP R1
	RET
	ramdisk_firstFree_full:
	LD R0 0
	CEZ R0 ; Return True
	POP R3
	POP R2
	POP R1
	RET

; R0 -> disk number
; R1 -> ptr to path
; R2 -> ptr to folder name zero padded to 12 characters
; R0 <- error code (Nominal 0)
; Destroys: R3
ramdisk_RMDIR:
	CALL ramdisk_getinfo
	CALL ramdisk_traverse
	CE R1 0xffff
	JMPC ramdisk_RMDIR_TraverseFail

	; R0 is the pointer in the ramdisk table
	; R1 has the page number
	; R2 has the ptr to the folder name

	ADD R0 1 	; Get the second item in the table
	DD R0
	LDD R3		; Read the address of the fs
	PSH R3

	CALL ramdisk_getchild
	JMPC ramdisk_RMDIR_NotFound
	; R0 now has the pointer to the allocated directory entry
	DD R0
	LDD R1
	AND R1 0b10
	CEZ R1
	JMPC ramdisk_RMDIR_NotADir
	INC R0
	DD R0
	LDD R1
	POP R3
	DEC R0
	PSH R0
	; R1 Page number of the directorys' contents
	; R3 fs pointer

	PSH R1
	PSH R3
	LDZ R1
	SHL R0 7
	ADD R3
	STZ R3
	; Address of page (R3) = fs start + Page number * page size	
	CNZ R1
	LD R1 0 ; Offset within page
	JMPC ramdisk_RMDIR_loop
	LD R1 48 ; First page has an offset of 48, not 0
	ramdisk_RMDIR_loop:
		CE R1 128
		JMPC ramdisk_RMDIR_allDeallocated
		; R1: Page offset of the current entry
		; R3: Address of the page start
		LDZ R3
		ADD R1
		ADD R1 16
		; R0: Address of current entry
		DD R0
		LDD R0		; Read entry flags
		AND R0 0b01
		CNZ R0		; If it's not allocated...
		JMPC ramdisk_RMDIR_RemainingChildren
		JMP ramdisk_RMDIR_loop

	ramdisk_RMDIR_allDeallocated:

	POP R3
	POP R1
	POP R0
	DD R0
	STD 0 ; Deallocate the directory entry

	; Steps: mark directory content page deallocated in both the page and the bitmap
	CALL ramdisk_deallocatePage
	LD R0 0x0000
	RET

	ramdisk_RMDIR_NotADir:
		POP R0
		LD R0 0x0001
		RET
	ramdisk_RMDIR_TraverseFail:
		LD R0 0x0002
		RET
	ramdisk_RMDIR_NotFound:
		POP R0
		LD R0 0x0003
		RET
	ramdisk_RMDIR_RemainingChildren:
		POP R3
		POP R1
		POP R0
		POP R0
		LD R0 0x0004
		RET

; R0 -> disk number
; R1 -> ptr to path
; R2 -> ptr to new folder name zero padded to 12 characters
; R0 <- error code (Nominal 0)
; Destroys: R3
ramdisk_MKDIR:
	CALL ramdisk_getinfo
	CALL ramdisk_traverse
	CE R1 0xffff
	JMPC ramdisk_MKDIR_TraverseFail

	; R0 is the pointer in the ramdisk table
	; R1 has the page number
	; R2 has the ptr to the new folder name

	STZ R3		; Copy table pointer to R3
	ADD R3 1 	; Get the second item in the table
	DD R3
	LDD R3		; Read the address of the fs

	CALL ramdisk_haschild
	JMPC ramdisk_MKDIR_NameTaken

	PSH R2

	LD R2 0 ; Offset from beginning of page to 1st directory entry
	CNZ R1
	JMPC ramdisk_MKDIR_SearchForDirLoop
	LD R2 48 ; For the first page, the offset is 48
	ramdisk_MKDIR_SearchForDirLoop:
		CE R2 128
		JMPC ramdisk_MKDIR_DirectoryFull

		; R1 is the page number of the parent directory
		; R2 is the offset within that page for the directory entry
		; R3 is the address of the fs

		LDZ R1 		; Copy page number to R0
		SHL R0 7 	; Multiply by 128 to get page offset within fs
		ADD R2		; Add the offset within the page
		ADD R3 		; Add fs address to offset

		PSH R0
		DD R0
		LDD R0		; Read entry flags
		AND R0 0b01
		CNZ R0		; If it's marked as allocated we need to check the next directory slot
		POP R0
		ADD R2 16	; Prepare for next interation	
		JMPC ramdisk_MKDIR_SearchForDirLoop	

	; R0 is the address of the directory entry
	; R1 is the page number of the parent directory
	; R2 is the offset within that page for the directory entry
	; R3 is the address of the fs
	
	CALL ramdisk_allocateFreePage
	CE R1 0xffff
	JMPC ramdisk_MKDIR_AllocPageFail

	DD R0
	STD 0b11 ; Store the flags: Directory, allocated

	; R1 is the new page for the new directory

	INC R0
	DD R0
	STD R1 ; Store the page of the directory in its parent's entry

	PSH R0 ; We need to make set all the new child directory entries as unallocated
	; R1 has the page number for the new directory
	LDZ R1
	SHL R0 7
	ADD R3 ; Page Number * 128 + fs address
	; R0 has the page address
	LD R2 8
	ramdsk_MKDIR_clearchildren_loop:
		DD R0
		STD 0
		DEC R2
		ADD R0 16
		CNZ R2
		JMPC ramdsk_MKDIR_clearchildren_loop
	POP R0

	INC R0
	POP R1 ; Ptr to new folder name
	; R0 points to the filename field of the directory entry
	; R1 has the ptr to the new folder name

	; Now we need to copy the filename string into the folder
	LD R2 0 ; A counter to make sure we don't overrun
	ramdisk_MKDIR_copyname:
		DD R1
		LDD R3
		DD R0
		STD R3
		INC R0
		INC R1
		INC R2
		CNE R2 12
		JMPC ramdisk_MKDIR_copyname

	INCD ; Zero the size bites as well
	STD 0
	INCD
	STD 0

	LD R0 0x0000
	RET

	ramdisk_MKDIR_NameTaken:
		LD R0 0x0001
		RET
	ramdisk_MKDIR_TraverseFail:
		LD R0 0x0002
		RET
	ramdisk_MKDIR_DirectoryFull:
		POP R2
		LD R0 0x0003
		RET
	ramdisk_MKDIR_AllocPageFail:
		POP R2
		LD R0 0x0004
		RET

; R0 -> disk number
; R1 -> ptr to path
; R0 <- error code (Nominal 0)
; R3 <- ptr to malloc'd listdir obj, or 0 on fail
; Listdir obj is 8, 12 character 0 padded strings (Not necessarily 0 terminated)
ramdisk_LIST:
	CALL ramdisk_getinfo
	; R0 is the pointer in the ramdisk table for this fs
	CALL ramdisk_traverse
	CE R1 0xffff
	JMPC ramdisk_LIST_TraverseFail
	; R1 has the page number

	; R2 has the ptr to the new folder name

	STZ R3		; Copy table pointer to R3
	ADD R3 1 	; Get the second item in the table
	DD R3
	LDD R3		; Read the address of the fs
	STR R3 $ramdisk_PendingFSAddress

	LD R0 96
	CALL malloc
	STZ R3

	PSH R3

	; R0 is the pointer in the ramdisk table
	; R1 has the page number
	; R2 is empty
	; R3 is ptr to malloc'd listdir obj
	; $ramdisk_PendingFSAddress has the fs address

	LD R2 0 ; Offset from beginning of page to 1st directory entry
	CNE R1 0
	JMPC ramdisk_LIST_ForDirLoop
	LD R2 48 ; For the first page, the offset is 48
	ramdisk_LIST_ForDirLoop:

		; R1 is the page number of the parent directory
		; R2 is the offset within that page for the directory entry

		LDZ R1 		; Copy page number to R0
		SHL R0 7 	; Multiply by 128 to get page offset within fs
		ADD R2		; Add the offset within the page
		ADD R0 $ramdisk_PendingFSAddress
		; R0 has address to directory entry	
		PSH R0
		PSH R1
		PSH R2

		PSH R1
		DD R0
		LDD R1
		AND R1 0b01
		CEZ R1
		POP R1
		JMPC ramdisk_LIST_Skip

		ADD R0 2	; Increment past flags/pg to name
		LD R1 0		; Load a counter into R2

		ramdisk_LIST_NameCopy:
			DD R0
			LDD R2

			DD R3
			STD R2

			INC R0
			INC R1
			INC R3
			CNE R1 12
			JMPC ramdisk_LIST_NameCopy

		ramdisk_LIST_Skip:

		POP R2
		POP R1
		POP R0
		ADD R2 16	; Prepare for next interation	
		CNE R2 128	; Loop if we're not at the end
		JMPC ramdisk_LIST_ForDirLoop


	LDZ R3
	POP R3
	PSH R3
	POP R2
	ADD R2 96
	; R0 has the end of the output
	; R2 has the final end of the output buffer
	; R3 has the start of the output
	ramdisk_LIST_fillLoop:
		PSH R0
		SBR R2 ; Distance left to fill
		CEZ R0
		POP R0
		JMPC ramdisk_LIST_fillLoop_done
		DD R0
		STD 0
		INC R0
		JMP ramdisk_LIST_fillLoop


	ramdisk_LIST_fillLoop_done:
	LD R0 0
	RET

	ramdisk_LIST_TraverseFail:
		POP R3
		LD R3 0
		LD R0 0x0001
		RET

; R0 -> disk number
; R1 -> ptr to absolute path
; R2 -> ptr to file name
; R3 -> fopen mode (1 to create if not exist, else 0)
; R0 <- error code (Nominal 0)
; R1 <- file Pointer
ramdisk_FOPEN:
	ST R3 $ramdisk_FOPEN_mode
	ST R0 $ramdisk_FOPEN_disknumber
	CALL ramdisk_getinfo
	CALL ramdisk_traverse
	CE R1 0xffff
	JMPC ramdisk_FOPEN_TraverseFail

	STZ R3		; Copy table pointer to R3
	ADD R3 1 	; Get the second item in the table
	DD R3
	LDD R3		; Read the address of the fs

	; R1 has the page number
	; R2 has the ptr to the file name
	; R3 has the fs address

	CALL ramdisk_haschild
	JMPC ramdisk_FOPEN_FileAlreadyExists

	; Should we create the file?
	PSH R0
	LD R0 $ramdisk_FOPEN_mode
	CEZ R0
	POP R0
	JMPC ramdisk_FOPEN_FileNotExist ; If R3 was zero, don't make a new file


	CALL ramdisk_isfull
	JMPC ramdisk_FOPEN_DirectoryFull

	; We get to create the file!
	; We need to:
	; 1. Allocate a new page on disk
	; 2. Allocate an entry in the parent directory and fill it out

	PSH R1 ; Store the parent page
	CALL ramdisk_allocateFreePage
	CE R1 0xffff
	JMPC ramdisk_FOPEN_AllocPageFail
	; R1 now has the new child page number
	PSH R1
	LDZ R1
	SHL R0 7
	ADD R3
	DD R0
	STD 0 ; Store a zero to the first byte of the new page: there isn't more than one page yet
	POP R0
	POP R1

	; R0 has the new page number
	; R1 has the parent page number
	; R2 has the new filename
	; R3 has the fs address

	PSH R2
	STZ R2
	CALL ramdisk_firstFree
	; R0 now has the pointer to a new directory entry
	DD R0
	STD 0b01 ; Allocated, not dir
	INC R0
	DD R0
	STD R2   ; Store new page number to directory entry
	POP R2
	INC R0
	; Now we need to copy the name from R2 to R0 for 12 chars, then store 2 byte file size (0 and 0)
	PSH R1
	PSH R2
	PSH R3

	LD R1 12 ; Name size
	ramdisk_FOPEN_copynameloop:
		DD R2
		LDD R3
		DD R0
		STD R3
		INC R0
		INC R2
		DEC R1
		CNZ R1
		JMPC ramdisk_FOPEN_copynameloop ; Copys 12 bytes from the new name into the entry

	DD R0
	STD 0
	INC R0
	DD R0
	STD 0 ; Final 2 size bytes

	POP R3
	POP R2
	POP R1	


	ramdisk_FOPEN_FileAlreadyExists:
	; We need to
	; 1. Create a global table entry
		; Global[i] = File functions table
	; 2. Create a local table entry
		; Local[j] = i, disk number, cursor=0, entry pointer
	; 3. Return i

	; Global Registry
	PSH R1
	LD R0 ramdisk_FileFuncsTable
	CALL vfs_register_fileptr
	POP R1
	PSH R0

	; Local Registry
	PSH
		LD R2 0 ; Counter
		ramdisk_FOPEN_register_loop:
			CE R2 ramdisk_FileTableSize
			JMPC ramdisk_FOPEN_RegisterFull
			PSH R2
			POP R1
			SHL R1 2 ; Multiply by 4, the size of each table entry
			ADD R1 ramdisk_FileTable
			ADD R1 1 ; Read from the page pointer instead
			DD R1
			LDD R1
			CNZ R1
			INC R2
			JMPC ramdisk_FOPEN_register_loop
		DEC R2
		LDZ R2 ; Save the table entry for later

		SHL R2 2 ; Multiply by 4, the size of each table entry
		ADD R2 ramdisk_FileTable
		ST R2 $ramdisk_FOPEN_localPointer
	POP

	; R0 has the new global file handler index
	; R1 has the parent page number
	; R2 has the filename
	; R3 has the fs address
	; $ramdisk_FOPEN_localPointer a pointer to the new local file handler entry

	; Store global, incrememnt local
	PSH R1
	LD R1 $ramdisk_FOPEN_localPointer
	DD R1
	STD R0
	INC R1
	ST R1 $ramdisk_FOPEN_localPointer
	POP R1

	CALL ramdisk_getchild
	JMPC ramdisk_FOPEN_CouldntOpen
	; R0 has child table entry number
	PSH R0
	DD R0
	LDD R1
	CNE R1 0b01 ; Make sure it's not a directory, and is allocated ; TODO
	JMPC ramdisk_FOPEN_DirNotFile

	; INC R0
	; DD R0
	; LDD R0 ; The first page of the file
	; Store first page, 
	LD R1 $ramdisk_FOPEN_localPointer
	DD R1
	LD R0 $ramdisk_FOPEN_disknumber
	STD R0
	INC R1
	DD R1
	STD 0
	INC R1
	DD R1
	POP R0
	STD R0

	POP R1
	LD R0 0
	RET

	ramdisk_FOPEN_disknumber: .db 0
	ramdisk_FOPEN_localPointer: .db 0
	ramdisk_FOPEN_mode: .db 0

	ramdisk_FOPEN_TraverseFail:
		LD R0 0x0001
		RET
	ramdisk_FOPEN_AllocPageFail:
		POP R0 
		LD R0 0x0002
		RET
	ramdisk_FOPEN_DirectoryFull:
		LD R0 0x0003
		RET
	ramdisk_FOPEN_DirNotFile:
		POP R0
		POP R0
		LD R0 0x0004
		RET
	ramdisk_FOPEN_RegisterFull:
		; TODO: Deallocate allocated resources?
		; Or maybe do this first?
		POP
		LD R0 0x0005
		RET
	ramdisk_FOPEN_CouldntOpen: ; Shouldn't happen lol
		POP R0
		LD R0 0x0006
		RET
	ramdisk_FOPEN_FileNotExist:
		LD R0 0x0007
		RET

; R0 -> disk number
; R1 -> ptr to absolute path
; R2 -> ptr to file name zero padded to 12 characters
; R0 <- error code (Nominal 0)
; Destroys: R3
ramdisk_RM:
	CALL ramdisk_getinfo
	CALL ramdisk_traverse
	CE R1 0xffff
	JMPC ramdisk_RM_TraverseFail

	; R0 is the pointer in the ramdisk table
	; R1 has the page number
	; R2 has the ptr to the folder name

	ADD R0 1 	; Get the second item in the table
	DD R0
	LDD R3		; Read the address of the fs
	PSH R3

	CALL ramdisk_getchild
	JMPC ramdisk_RM_NotFound
	; R0 now has the pointer to the allocated directory entry
	DD R0
	LDD R1
	AND R1 0b10
	CNZ R1
	JMPC ramdisk_RM_NotAFile

	DD R0
	STD 0 ; Deallocate the directory entry
	INC R0
	; R0 has the pointer to the page field of the directory entry
	POP R3

	ramdisk_RM_loop:
	DD R0
	LDD R1 ; Page number to deallocate
	CEZ R1
	JMPC ramdisk_RM_loop_done
	CALL ramdisk_deallocatePage
	LDZ R1
	SHL R0 7
	ADD R3 ; Page Number * 128 + fs address
	JMP ramdisk_RM_loop

	ramdisk_RM_loop_done:

	; R0 has the 
	; R1 Page number of the directorys' contents
	; R3 fs pointer

	; Steps: mark directory content page deallocated in both the page and the bitmap
	LD R0 0x0000
	RET

	ramdisk_RM_NotAFile:
		POP R0
		LD R0 0x0001
		RET
	ramdisk_RM_TraverseFail:
		LD R0 0x0002
		RET
	ramdisk_RM_NotFound:
		POP R0
		LD R0 0x0003
		RET

; R0 -> disk number
; R1 -> ptr to absolute path
; R2 -> ptr to file name zero padded to 12 characters
; R0 <- error code (Nominal 0)
; R3 <- file pointer to malloc'd stat struct
; 3 bytes: [directory entry flags, first page, file size]
ramdisk_STAT:
	CALL ramdisk_getinfo
	CALL ramdisk_traverse
	CE R1 0xffff
	JMPC ramdisk_LIST_TraverseFail
	; R0 is the pointer in the ramdisk table for this fs
	; R1 has the page number
	; R2 has the ptr to the new folder name

	STZ R3		; Copy table pointer to R3
	ADD R3 1 	; Get the second item in the table
	DD R3
	LDD R3		; Read the address of the fs
	STR R3 $ramdisk_PendingFSAddress

	CALL ramdisk_getchild
	JMPC ramdisk_STAT_NotFound

	STZ R2
	LD R0 3
	CALL malloc
	STZ R3
	; R0 malloc'd struct
	; R2 pointer to directory entry
	; R3 malloc'd struct

	DD R2
	LDD R1
	DD R0
	STD R1 ; Copy directory flags

	INC R0
	INC R2

	DD R2
	LDD R1
	DD R0
	STD R1 ; Copy first page

	INC R0
	ADD R2 14

	DD R2
	LDD R1
	DD R0
	STD R1 ; Copy file size

	LD R0 0

	RET
	ramdisk_STAT_NotFound:
		LD R0 0x0001
		RET

; R0 -> file pointer
; R0 <- error code (Nominal 0)
ramdisk_FCLOSE:
	CALL ramdisk_getlocalfile
	SHL R0 2 ; Multiply by 4, the size of each table entry
	ADD R0 ramdisk_FileTable
	INC R0
	DD R0
	STD 0 ; Zero the page pointer
	DEC R0
	DD R0
	LDD R0 ; Load the index into the global
	CALL vfs_unregister_fileptr
	LD R0 0 ; No errors
	RET

; R0 -> file pointer
; R1 -> buffer to read from
; R2 -> emount of bytes to read
; R0 <- error code (Nominal 0)
; R1 <- bytes read
ramdisk_FWRITE:
	CALL ramdisk_getlocalfile
	; R0 has a pointer to the local file table entry
		; 0. The global file pointer number
		; 1. The disk number
		; 2. The cursor in file
		; 3. The pointer to the directory entry

	STZ R3
	INC R0
	DD R0
	LDD R0 ; Load disk number to R0 
	CALL ramdisk_getinfo
	INC R0
	DD R0
	LDD R0 ; Load the fs address
	PSH R0
	LDZ R3
	POP R3 ; Swap R0 and R3

	; R0-R2 is unchanged
	; R3 has the fs address

	; We need to 
	;  Seek to the cursor
	;  Start writing
	;  Pay attention to page gaps
	;  Keep the directory entry (size) and local file pointer entry (cursor pos) up to date
	;  + Can't preupdate in case we can't write all the data

	PSH R1

	ADD R0 2
	ST R0 $ramdisk_FWRITE_cursor_ptr

	INC R0
	DD R0
	LDD R1 ; Load the pointer to the local directory
	INC R1
	DD R1
	LDD R0 ; Starting page number

	ADD R1 14
	ST R1 $ramdisk_FWRITE_size_ptr

	POP R1
	; R0 has the starting page number
	; R1 has the buffer
	; R2 has the buffer size
	; R3 has the fs address

	PSH R1
	PSH R2
	LD R2 $ramdisk_FWRITE_cursor_ptr
	DD R2
	LDD R2 ; Load the cursor from the cursor pointer


	ramdisk_FWRITE_cursorloop_pageloop:
		SHL R0 7
		ADD R3 ; R0 now has the address of the first page

		DD R0
		ST R0 $ramdisk_FWRITE_nextpage_ptr ; Store the pointer to the number of the next page

		STZ R1
		ADD R1 128

		INC R0 ; to the first value

		; R0 has the address to the first point of the starting page
		; R1 has the address to the last point of the starting page
		; R2 has the cursor quantity
		; R3 has the fs address

		ramdisk_FWRITE_cursorloop:
			CEZ R2
			JMPC ramdisk_FWRITE_cursorloop_cursordone
			INC R0 ; Increment the current pointer
			DEC R2 ; Decrease the cursor
			PSH R0
			SUB R1 ; R0 = R0 - R1
			CEZ R0
			POP R0
			JMPC ramdisk_FWRITE_cursorloop_pagedone
			JMP ramdisk_FWRITE_cursorloop

		ramdisk_FWRITE_cursorloop_pagedone:
			LD R0 $ramdisk_FWRITE_nextpage_ptr
			DD R0
			LDD R0
			CEZ R0
			JMPC ramdisk_FWRITE_CursorTooLarge ; We've reached the end of the pages but not the end of the cursor
			JMP ramdisk_FWRITE_cursorloop_pageloop

	ramdisk_FWRITE_cursorloop_cursordone:
	POP R2
	ST R2 $ramdisk_FWRITE_bufsize
	POP R2

	ST 0 $ramdisk_FWRITE_byteswritten

	ramdisk_FWRITE_writeloop:
		; R0 has the address of the first free byte
		; R1 has the address of the end of the page
		; R2 has the address of the buffer
		; R3 has the fs address

		PSH R0
		SUB R1 ; R0 = R0 - R1
		CEZ R0
		POP R0
		JMPC ramdisk_FWRITE_writeloop_pagedone ; Check if the page is done

		PSH R2
		LD R2 $ramdisk_FWRITE_bufsize
		CEZ R2
		POP R2
		JMPC ramdisk_FWRITE_writeloop_bufferdone

		PSH R3
		DD R2
		LDD R3
		DD R0
		STD R3
		POP R3 ; Copy byte from buffer to free byte

		PSH R2
		LD R2 $ramdisk_FWRITE_bufsize
		DEC R2
		ST R2 $ramdisk_FWRITE_bufsize
		POP R2 ; Decrement buffer length

		PSH R2
		LD R2 $ramdisk_FWRITE_byteswritten
		INC R2
		ST R2 $ramdisk_FWRITE_byteswritten
		POP R2 ; Increment bytes written

		PSH R2
		LD R2 $ramdisk_FWRITE_size_ptr
		DD R2
		LDD R2
		INC R2
		STD R2
		POP R2 ; Increment file size

		PSH R2
		LD R2 $ramdisk_FWRITE_cursor_ptr
		DD R2
		LDD R2
		INC R2
		STD R2
		POP R2 ; Increment cursor

		INC R0 ; Increment the current pointer
		INC R2 ; Increment the buffer address
		JMP ramdisk_FWRITE_writeloop

		ramdisk_FWRITE_writeloop_pagedone:
			LD R0 $ramdisk_FWRITE_nextpage_ptr
			DD R0
			LDD R0
			CEZ R0
			CALLC ramdisk_FWRITE_writeloop_newpage ; We've reached the end of the pages but not the end of the buffer
			SHL R0 7
			ADD R3 ; R0 now has the address of the next page
			ST R0 $ramdisk_FWRITE_nextpage_ptr ; Store the pointer to the number of the next page

			STZ R1
			ADD R1 128

			INC R0 ; to the first value

			JMP ramdisk_FWRITE_writeloop

		ramdisk_FWRITE_writeloop_newpage:
			; ramdisk_FWRITE_nextpage_ptr points to a zero.
			; We need to allocate a new page,
			; save the page number to ramdisk_FWRITE_nextpage_ptr,
			; and load the new page number into R0
			PSH R1
			CALL ramdisk_allocateFreePage
			CE R1 0xffff
			JMPC ramdisk_FWRITE_AllocPageFailed
			LD R0 $ramdisk_FWRITE_nextpage_ptr
			DD R0
			STD R1 ; Save the new page number to the previous page
			LDZ R1 ; Load the page number into R0
			POP R1
			RET

	ramdisk_FWRITE_writeloop_bufferdone:
	; Any cleanup? IDK

	LD R0 0
	LD R1 $ramdisk_FWRITE_byteswritten
	RET
	ramdisk_FWRITE_nextpage_ptr: .db 0
	ramdisk_FWRITE_cursor_ptr: .db 0
	ramdisk_FWRITE_size_ptr: .db 0
	ramdisk_FWRITE_bufsize: .db 0
	ramdisk_FWRITE_byteswritten: .db 0

	ramdisk_FWRITE_CursorTooLarge:
		POP R2
		POP R1
		LD R0 0x0001
		LD R1 0 ; Couldn't catch cursor up - wrote nothing
		RET
	ramdisk_FWRITE_AllocPageFailed:
		POP R0 ; Pop from ret
		POP R1
		LD R0 0x0002
		LD R1 $ramdisk_FWRITE_byteswritten
		RET

; R0 -> file Pointer
; R1 -> buffer to read into
; R2 -> amount of bytes to read
; R0 <- error code (Nominal 0)
; R1 <- bytes read
ramdisk_FREAD:
	CALL ramdisk_getlocalfile
	; R0 has a pointer to the local file table entry
		; 0. The global file pointer number
		; 1. The disk number
		; 2. The cursor in file
		; 3. The pointer to the directory entry

	STZ R3
	INC R0
	DD R0
	LDD R0 ; Load disk number to R0 
	CALL ramdisk_getinfo
	INC R0
	DD R0
	LDD R0 ; Load the fs address
	PSH R0
	LDZ R3
	POP R3 ; Swap R0 and R3

	; R0-R2 is unchanged
	; R3 has the fs address

	; We need to 
	;  Seek to the cursor
	;  Start writing
	;  Pay attention to page gaps
	;  Keep the directory entry (size) and local file pointer entry (cursor pos) up to date
	;  + Can't preupdate in case we can't write all the data

	PSH R1

	ADD R0 2
	ST R0 $ramdisk_FREAD_cursor_ptr

	INC R0
	DD R0
	LDD R1 ; Load the pointer to the local directory
	INC R1
	DD R1
	LDD R0 ; Starting page number

	ADD R1 14
	ST R1 $ramdisk_FREAD_size_ptr

	POP R1
	; R0 has the starting page number
	; R1 has the buffer
	; R2 has the buffer size
	; R3 has the fs address

	PSH R1
	PSH R2
	LD R2 $ramdisk_FREAD_cursor_ptr
	DD R2
	LDD R2 ; Load the cursor from the cursor pointer


	ramdisk_FREAD_cursorloop_pageloop:
		SHL R0 7
		ADD R3 ; R0 now has the address of the first page

		DD R0
		ST R0 $ramdisk_FREAD_nextpage_ptr ; Store the pointer to the number of the next page

		STZ R1
		ADD R1 128

		INC R0 ; to the first value

		; R0 has the address to the first point of the starting page
		; R1 has the address to the last point of the starting page
		; R2 has the cursor quantity
		; R3 has the fs address

		ramdisk_FREAD_cursorloop:
			CEZ R2
			JMPC ramdisk_FREAD_cursorloop_cursordone
			INC R0 ; Increment the current pointer
			DEC R2 ; Decrease the cursor
			PSH R0
			SUB R1 ; R0 = R0 - R1
			CEZ R0
			POP R0
			JMPC ramdisk_FREAD_cursorloop_pagedone
			JMP ramdisk_FREAD_cursorloop

		ramdisk_FREAD_cursorloop_pagedone:
			LD R0 $ramdisk_FREAD_nextpage_ptr
			DD R0
			LDD R0
			CEZ R0
			JMPC ramdisk_FREAD_CursorTooLarge ; We've reached the end of the pages but not the end of the cursor
			JMP ramdisk_FREAD_cursorloop_pageloop

	ramdisk_FREAD_cursorloop_cursordone:
	POP R2
	ST R2 $ramdisk_FREAD_bufsize
	POP R2

	ST 0 $ramdisk_FREAD_bytesread

	ramdisk_FREAD_writeloop:
		; R0 has the address of the first free byte
		; R1 has the address of the end of the page
		; R2 has the address of the buffer
		; R3 has the fs address

		PSH R0
		SUB R1 ; R0 = R0 - R1
		CEZ R0
		POP R0
		JMPC ramdisk_FREAD_writeloop_pagedone ; Check if the page is done

		PSH R2
		LD R2 $ramdisk_FREAD_bufsize
		CEZ R2
		POP R2
		JMPC ramdisk_FREAD_writeloop_bufferdone

		PSH R3
		DD R0
		LDD R3
		DD R2
		STD R3
		POP R3 ; Copy byte from next byte to buffer

		PSH R2
		LD R2 $ramdisk_FREAD_bufsize
		DEC R2
		ST R2 $ramdisk_FREAD_bufsize
		POP R2 ; Decrement buffer length

		PSH R2
		LD R2 $ramdisk_FREAD_bytesread
		INC R2
		ST R2 $ramdisk_FREAD_bytesread
		POP R2 ; Increment bytes written

		PSH R2
		LD R2 $ramdisk_FREAD_size_ptr
		DD R2
		LDD R2
		INC R2
		STD R2
		POP R2 ; Increment file size

		PSH R2
		LD R2 $ramdisk_FREAD_cursor_ptr
		DD R2
		LDD R2
		INC R2
		STD R2
		POP R2 ; Increment cursor

		INC R0 ; Increment the current pointer
		INC R2 ; Increment the buffer address
		JMP ramdisk_FREAD_writeloop

		ramdisk_FREAD_writeloop_pagedone:
			LD R0 $ramdisk_FREAD_nextpage_ptr
			DD R0
			LDD R0
			CEZ R0
			JMPC ramdisk_FREAD_WriteBufferToLarge ; We've reached the end of the pages but not the end of the buffer
			SHL R0 7
			ADD R3 ; R0 now has the address of the next page
			ST R0 $ramdisk_FREAD_nextpage_ptr ; Store the pointer to the number of the next page

			STZ R1
			ADD R1 128

			INC R0 ; to the first value

			JMP ramdisk_FREAD_writeloop

	ramdisk_FREAD_WriteBufferToLarge:
	ramdisk_FREAD_writeloop_bufferdone:
	; Any cleanup? IDK

	LD R0 0
	LD R1 $ramdisk_FREAD_bytesread
	RET
	ramdisk_FREAD_nextpage_ptr: .db 0
	ramdisk_FREAD_cursor_ptr: .db 0
	ramdisk_FREAD_size_ptr: .db 0
	ramdisk_FREAD_bufsize: .db 0
	ramdisk_FREAD_bytesread: .db 0

	ramdisk_FREAD_CursorTooLarge:
		POP R2
		POP R1
		LD R0 0x0001
		LD R1 0 ; Couldn't catch cursor up - wrote nothing
		RET
	ramdisk_FREAD_AllocPageFailed:
		POP R0 ; Pop from ret
		POP R1
		LD R0 0x0002
		LD R1 $ramdisk_FREAD_bytesread
		RET

; R0 -> file pointer
; R1 -> position to seek to
; R0 <- error code (Nominal 0)
ramdisk_FSEEK:
	CALL ramdisk_getlocalfile
	; R0 has a pointer to the local file table entry
		; 0. The global file pointer number
		; 1. The disk number
		; 2. The cursor in file
		; 3. The pointer to the directory entry
	CE R1 0xffff
	JMPC ramdisk_FSEEK_toend
	ADD R0 2 ; Point to cursor
	DD R0
	STD R1 ; Store the value from R1 into the cursor
	LD R0 0
	RET

	ramdisk_FSEEK_toend:
		ADD R0 3
		DD R0
		LDD R1 ; Pointer to the directory entry
		ADD R1 15 ; size field
		DD R1
		LDD R1
		DEC R0
		DD R0
		STD R1
		LD R0 0
		RET

; R1 -> page number to deallocate
; R3 -> fs address
ramdisk_deallocatePage:
	PSH
	ADD R3 4 	; Get to the bitmap
	LDZ R1

	SHR R0 4
	AND R1 0x000f

	; R0: number of bytes
	; R1: bit position
	; R3: Bitmap start address

	ADD R3 ; Add bitmap start to bitmap byte
	; R0 is pointer to bitmap byte
	; R1 is bit position to unset
	DD R0
	LDD R2
	STZ R3

	; R1 is bit position to unset
	; R2 is byte value
	; R3 is the byte address
	LD R0 0x8000
	SHR R1
	NOT R0
	; R0 has the inverse of the new bit
	AND R2
	; R0 has new byte value
	DD R3
	STD R0
	; Write new value back into bitmap
	POP
	PSH R3
		ADD R3 3
		DD R3
		LDD R3
		INC R3
		STD R3
	POP R3
	RET

; R3 -> fs address
; R1 <- The page number of the new page or 0xffff on fail
ramdisk_allocateFreePage:
	PSH R3
	PSH R2
	PSH R0

	ADD R3 3 	; Get to the bitmap

	PSH R3
		DD R3
		LDD R3
		CEZ R3
		JMPC ramdisk_allocateFreePage_nofreePages
		DEC R3
		STD R3
	POP R3

	LD R2 0 ; Counter for bytes
	PSH R2

	; Loops through each byte in the bitmap
	ramdisk_allocateFreePage_Loop_Outer:
	POP R2
	INC R2
	CE R2 33
	JMPC ramdisk_allocateFreePage_nofree
	PSH R2

	INC R3
	DD R3
	LD R0		; Byte in bitmap
	LD R2 0		; Counter for bit position

	; Loops through each bit in the current byte
	ramdisk_allocateFreePage_Loop:
		CE R2 16
		JMPC ramdisk_allocateFreePage_Loop_Outer
		PSH R0
		AND R0 0x8000
		CNZ R0
		POP R0
		INC R2
		SHL R0 1
		JMPC ramdisk_allocateFreePage_Loop

	POP R1
	DEC R1
	DEC R2

	; R1 has the byte number
	; R2 has the bit position
	; R3 has the address of byte

	DD R3
	LDD R3 			; Load the bytes value
	
	LD R0 0x8000
	SHR R2			; Shift a 1 in the MSB to the right by R2
	; This is the newly allocated page
	OR R3			; OR the new bit with the old value
	STD R0			; Store it!

	; R1 has the byte number
	; R2 has the bit position

	LDZ R1
	SHL R0 4
	ADD R2		; R0 = R1 * 16 + R2
	STZ R1

	; R1 has the page number

	POP R0
	POP R2
	POP R3
	RET

	ramdisk_allocateFreePage_nofreePages:
	POP R3
	ramdisk_allocateFreePage_nofree:
	LD R1 0xffff
	POP R0
	POP R2
	POP R3
	RET

; R0 -> disk number
; R0 <- Pointer to item in table entry
ramdisk_getinfo:
	PSH R1
	PSH R2
	LD R1 ramdisk_Table
	ramdisk_getinfo_loop:
		DD R1
		LDD R2 ; Disk ID of first entry
		PSH R0
		SUB R2 ; Subtract R2 from R0
		CNZ R0 ; See if R0-R2 = 0: if not, need to loop
		POP R0
		ADD R1 4 ; Increment R1 to next table entry
		JMPC ramdisk_getinfo_loop
	SUB R1 4

	PSH R1
	POP R0

	POP R2
	POP R1
	RET

; R0 -> Global file pointer
; R0 <- Local file pointer
ramdisk_getlocalfile:
	PSH R1
	PSH R2
	LD R1 ramdisk_FileTable
	ramdisk_FileTable_loop:
		DD R1
		LDD R2 ; Disk ID of first entry
		PSH R0
		SUB R2 ; Subtract R2 from R0
		CNZ R0 ; See if R0-R2 = 0: if not, need to loop
		POP R0
		ADD R1 4 ; Increment R1 to next table entry
		JMPC ramdisk_FileTable_loop
	SUB R1 4

	PSH R1
	POP R0

	POP R2
	POP R1
	RET

; R0 -> Pointer to item in table entry
; R1 -> ptr to absolute path string
; R1 <- Page number, 0xfff on fail
ramdisk_traverse:
	PSH R0
	PSH R2
	PSH R3

	ADD R0 1 	; Get the second item in the table
	DD R0
	LDD R3		; Read the address of the fs

	; R1 pointer to the path string
	; R3 address of fs

	LD R2 0 ; Page to start on
	DD R1
	LDD R0 ; Holds first char of path
	CNE R0 '/'
	JMPC ramdisk_traverse_error ; Ahh! Path not absolute!
	INC R1

	ramdisk_traverse_loop:
	DD R1
	LDD R0
	CE R0 0
	JMPC ramdisk_traverse_done ; If the path is just '/', then we're done!

	PSH R3
	LD R3 ramdisk_traverse_path_segment
	ramdisk_traverse_copyLoop:
		DD R1
		LDD R0
		DD R3
		STD R0
		INC R1
		INC R3
		CEZ R0
		JMPC ramdisk_traverse_copyLoop_done
		CE R0 '/'
		JMPC ramdisk_traverse_copyLoop_done
		JMP ramdisk_traverse_copyLoop

	ramdisk_traverse_copyLoop_done:
	POP R3
	STD 0 ; We've either stored a / or a 0, make sure it's a 0 for string termination

	; We now have a zero terminated string in ramdisk_traverse_path_segment for the path segment
	; R1 is the pointer in the path string that now points after the current segment
	; R2 has the current page in the fs
	; R3 is the address of the file system

	PSH R1
	PSH R2
		; Need to: Find child, make sure its a directory, go to it, repeat
		PSH R2
		POP R1 ; Move current page to R1
		LD R2 ramdisk_traverse_path_segment
		; R1 page number
		; R2 pointer to name to check
		; R3 address of fs start
		CALL ramdisk_getchild
	POP R2
	POP R1
	JMPC ramdisk_traverse_segment_success ; If found, no problem. Otherwise jmp to error
	JMP ramdisk_traverse_error
	ramdisk_traverse_segment_success:
	; R0 is the pointer to the directory entry
	; R1 is the pointer in the path string that now points after the current segment
	; R2 has the current page in the fs
	; R3 is the address of the file system
	PSH R1
	DD R0
	LDD R1
	; R1 has flags
	AND R1 0b10
	CEZ R1
	POP R1
	JMPC ramdisk_traverse_error ; If it's not a directory, fail
	INC R0
	PSH R1
	DD R0
	LDD R2 ; Load new page number into R2
	POP R1
	JMP ramdisk_traverse_loop



	; Checks if the given page has the given child name
	; Returns in conditions register
	; R1 page number
	; R2 pointer to name to check
	; R3 address of fs start
	; Destroys: R0 <- pointer to child
	; ramdisk_getchild

	ramdisk_traverse_error:
	LD R1 0xffff
	POP R3
	POP R2
	POP R0
	RET
	ramdisk_traverse_done:
	PSH R2
	POP R1

	POP R3
	POP R2
	POP R0
	RET

ramdisk_traverse_path_segment: .dz 13

#DEF ramdisk_TableSize 2
; Each entry is 4 bytes
; The disk number, the address, the size, and one blank
ramdisk_Table:
.dz 4 * ramdisk_TableSize


#DEF ramdisk_FileTableSize 6
; Each entry is 4 bytes
; 0. The global file pointer number
; 1. The disk number
; 2. The cursor in file
; 3. The pointer to the directory entry
ramdisk_FileTable:
.dz 4 * ramdisk_FileTableSize

ramdisk_PendingFSAddress: .db 0

; Each driver table has:
ramdisk_DriverTable:
	.db ramdisk_MKDIR
	.db ramdisk_LIST
	.db ramdisk_RMDIR
	.db ramdisk_FOPEN
	.db ramdisk_RM
	.db ramdisk_STAT

; Each driver table has:
ramdisk_FileFuncsTable:
	.db ramdisk_FCLOSE
	.db ramdisk_FWRITE
	.db ramdisk_FREAD
	.db ramdisk_FSEEK
