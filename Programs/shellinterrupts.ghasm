#SHARE shellCWD
shellCWD:
	AOR
	ADO 0
	ST R0 $PrevAO

	LD R0 currentDirectory
	SUB R0 $PrevAO
	LD R1 $currentDisk
	ADO $PrevAO
	RET

; R0 is the interrupt number (not address)
; R1 is the new address
#SHARE updateInterrupt
updateInterrupt:
	; Need to account for AO
	PSH R0
	AOR
	ADO 0
	ST R0 $PrevAO
	POP R0

	ADD R1 $PrevAO

	ADD R0 0xaf00
	; DBG R0
	; DBG R1
	DD R0
	STD R1
	
	ADO $PrevAO
	RET

; R1 -> String pointer
; R2 -> Trailing slash enable: 0 for file 1 for patb
#SHARE formatPathString
formatPathString:
	PSH R0
	AOR
	ADO 0
	ST R0 $PrevAO
	POP R0

	ADD R1 $PrevAO

	; Do Stuff
	CALL MakeAbsolute
	CALL SplitPath
	CE R2 0xffff
	JMPC formatPathString_ErrorNoAdd
	SUB R1 $PrevAO
	SUB R2 $PrevAO
	formatPathString_ErrorNoAdd:
	ADO $PrevAO
	RET


; | R2| Name  | Regs    | Notes...
; | 0 | Clear | None    | Also clears charmem/cursor
; | 1 | NewL  | None    | Auto scrolls screen
; | 2 | Set   | R0 Char | Does not advance cursor
; | 3 | Print | R0 Char | Does not handle newlines, advances cursor
; | 4 | Num   | R0 Val  | Prints value in base 10
; | 5 | Buf   | $R1, R0 | Buffer length R0, ignores newlines
; | 6 | Str   | R1 ptr  | Displays string, handles newline
; | 7 | Line  | R1 ptr  | Displays string, adds newline
; | 8 | Blank | None    | Blanks the screen, but now the charmem

; As a rule, R0 is a value and R1 is a pointer

#SHARE outputInterrupt
outputInterrupt:
	PSH R0
	AOR
	ADO 0
	ST R0 $PrevAO
	POP R0

	ADD R1 $PrevAO

	CE R2 0x0000
	CALLC ClearScreen
	CE R2 0x0001
	CALLC CursorNewline
	CE R2 0x0002
	CALLC SetAtCursor
	CE R2 0x0003
	CALLC PrintAtCursor
	CE R2 0x0004
	CALLC PrintNumberAtCursor
	CE R2 0x0005
	CALLC PrintBufAtCursor
	CE R2 0x0006
	CALLC PrintStringAtCursor
	CE R2 0x0007
	CALLC PrintLineAtCursor
	CE R2 0x0008
	; CALLC BlankScreen

	ADO $PrevAO
	RET


PrevAO: .db 0
