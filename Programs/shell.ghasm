JMP PROG_START
#INC ./lib/IVT.ghasm
#INC ./lib/kernel.ghasm
#INC ./lib/vfs.ghasm
#INC ./lib/vfsstrings.ghasm
#INC ./lib/ramdisk.ghasm
#INC ./lib/stringPrint.ghasm
#INC ./lib/charPrint.ghasm

Timer:				.db 0xffff
Cursor: 			.db 0x0000 ; (ypos, xpos)
LastCursor:			.db 0x0000 ; ^
CommandEnd:			.db 0x0000 ; ^
KB_Mods:			.db 0 ; 0000 0000 0000 win+alt+ctrl+shift

currentDisk: .db 0

currentDirectory:
.ds "/"
.dz (12+1)*8 +1

absoluteDirectory:
.ds "/"
.dz (12+1)*8 +1

Font:
#INC ./fontGen/font.hex
#INC ./lib/charmem.ghasm
#INC ./lib/shelloutput.ghasm
#INC ./lib/shellpaths.ghasm
#INC ./shellinterrupts.ghasm
#INC ./shellstrings.ghasm
PROG_START:

; TODO: Self-test of sorts?
startup:
	ST 0b0000000000000001 $0xaff0	;; Background
	ST 0b0000011111001000 $0xaff1	;; Forground
	ST 3 $0xafef					;; Display mode

	; Register file-ops interrupts

	ST free_interrupt		$0xaf00+Ifree
	ST malloc_interrupt		$0xaf00+Imalloc
	ST outputInterrupt 		$0xaf00+Ioutput
	ST formatPathString 	$0xaf00+IformatPath
	ST updateInterrupt		$0xaf00+IupdateInterrupt
	ST shellCWD				$0xaf00+IshellCWD
	ST vfs_mkdir			$0xaf00+Imkdir
	ST vfs_list				$0xaf00+Ilist
	ST vfs_rmdir			$0xaf00+Irmdir
	ST vfs_fopen			$0xaf00+Ifopen
	ST vfs_rm				$0xaf00+Irm
	ST vfs_stat				$0xaf00+Istat
	ST vfs_flags			$0xaf00+Iflags
	ST vfs_fclose			$0xaf00+Ifclose
	ST vfs_fwrite			$0xaf00+Ifwrite
	ST vfs_fread			$0xaf00+Ifread
	ST vfs_fseek			$0xaf00+Ifseek


	ST printString 			$0xaf00+IprintString			;; Register printString as the string printing interrupt
	ST printChar 			$0xaf00+IprintChar			;; Register printChar as the character printing interrupt

	LD R1 STR_SHELL_STARTUP
	CALL PrintLineAtCursor

	LD R0 RAMDISK
	LD R1 RAMDISKSIZE
	CALL ramdisk_load
	ST R0 $currentDisk

	LD R1 STR_SHELL_STARTUP_RAMDISK
	CALL PrintLineAtCursor

	ST KeyboardInterrupt $0xaf00	;; Register Keyboard Interrupt

	LD R0 '>'
	CALL PrintAtCursor

	MV $Cursor $LastCursor

	loop:
		CALL blinkCursor
		CALL delay
		JMP loop
	HLT

delay:
	LD R0 0
	delayLoop:
		INC R0
		CNE R0 0x200
		JMPC delayLoop
	RET

blinkCursor:
	LD R0 $Timer
	INC R0
	ST R0 $Timer
	CE R0 0
	JMPC showCursor
	CE R0 0x8000
	JMPC hideCursor
	RET

	hideCursor:
		LD R1 $Cursor
		ADD R1 CharMem
		DD R1
		LDD R0
		CALL SetAtCursor
		RET

	showCursor:
		LD R0 '_' 			; Character
		CALL SetAtCursor
		RET

KeyboardInterrupt:
	IDIS
	PSH
	CPSH
	ST 0xffff $Timer
	LD R1 $0xafd0					; Get key state
	CE R1 0
	LD R0 $0xafd1					; Load the new character
	JMPC KI_Keyup

	CE R0 0x0008 ; Backspace
	JMPC KI_Backspace
	CE R0 0x000d ; Enter
	JMPC KI_Enter
	CE R0 0x00e3 ; L_Win
	JMPC KI_Win_Down
	CE R0 0x00e2 ; L_Alt
	JMPC KI_Alt_Down
	CE R0 0x00e1 ; L_Shift
	JMPC KI_Shift_Down
	CE R0 0x00e0 ; L_Control
	JMPC KI_Control_Down
	
	CALL ApplyShift

	LD R1 $Cursor
	ADD R1 CharMem
	DD R1
	STD R0

	CALL PrintAtCursor

	KeyboardInterruptExit:
	CPOP
	POP
	IEN
	RET

	KI_Keyup:
		CE R0 0x00e3 ; L_Win
		JMPC KI_Win_Up
		CE R0 0x00e2 ; L_Alt
		JMPC KI_Alt_Up
		CE R0 0x00e1 ; L_Shift
		JMPC KI_Shift_Up
		CE R0 0x00e0 ; L_Control
		JMPC KI_Control_Up
		JMP KeyboardInterruptExit
		
	KI_Win_Up:
		LD R0 0
		LD R1 3
		CALL SetModifier
		JMP KeyboardInterruptExit
	KI_Win_Down:
		LD R0 1
		LD R1 3
		CALL SetModifier
		JMP KeyboardInterruptExit
		
	KI_Alt_Up:
		LD R0 0
		LD R1 2
		CALL SetModifier
		JMP KeyboardInterruptExit
	KI_Alt_Down:
		LD R0 1
		LD R1 2
		CALL SetModifier
		JMP KeyboardInterruptExit

	KI_Shift_Up:
		LD R0 0
		LD R1 0
		CALL SetModifier
		JMP KeyboardInterruptExit
	KI_Shift_Down:
		LD R0 1
		LD R1 0
		CALL SetModifier
		JMP KeyboardInterruptExit
		
	KI_Control_Up:
		LD R0 0
		LD R1 1
		CALL SetModifier
		JMP KeyboardInterruptExit
	KI_Control_Down:
		LD R0 1
		LD R1 1
		CALL SetModifier
		JMP KeyboardInterruptExit

	KI_Backspace:
		LD R1 $Cursor
		CLT R1 $LastCursor
		JMPC KeyboardInterruptExit
		CE R1 $LastCursor
		JMPC KeyboardInterruptExit

		LD R0 ' '
		CALL SetAtCursor
		LD R1 $Cursor
		DEC R1
		ST R1 $Cursor
		ADD R1 CharMem
		DD R1
		STD ' '
		LD R0 ' '
		CALL SetAtCursor
		JMP KeyboardInterruptExit

	KI_Enter:
		LD R1 $Cursor
		ADD R1 CharMem
		DD R1
		STD 0				; Store a null terminator into charmem
		LD R0 ' '
		CALL SetAtCursor	; Display a space

		MV $Cursor $CommandEnd

		CALL CursorNewline

		IEN
		CALL handleUserInput

		LD R0 '>'
		CALL PrintAtCursor

		MV $Cursor $LastCursor

		JMP KeyboardInterruptExit


; R0 -> disk number
; R1 -> ptr to absolute path
; R2 -> ptr to file name
; R3 -> ptr to arguments string
; R0 <- error code (Nominal 0)
ExecuteFile:
	; R0 -> disk number
	; R1 -> ptr to absolute path
	; R2 -> ptr to file name
	; R3 -> fopen mode (1 to create if not exist, else 0)
	; R0 <- error code (Nominal 0)
	; R1 <- file Pointer
	PSH
		CALL vfs_stat
		CNZ R0
		JMPC ExecuteFile_error_stat
		PSH R3
		DD R3
		LD R2
		AND R2 0b100
		CEZ R2
		JMPC ExecuteFile_error_notExec
		ADD R3 2
		DD R3
		LDD R3
		ST R3 $ExecuteFile_filesize
		POP R0
		CALL free
	POP
	PSH R3
	LD R3 0
	CALL vfs_fopen
	CNZ R0
	POP R3
	JMPC ExecuteFile_error_fopen
	PSH R1
	LDZ R1

	; R0 has the file pointer
	; ExecuteFile_filesize has the file size
	PSH R3
	PSH R0
	LD R0 $ExecuteFile_filesize
	CALL malloc
	STZ R1
	POP R0
	CEZ R1
	JMPC ExecuteFile_error_malloc

	LD R2 $ExecuteFile_filesize
	; R0 -> file Pointer
	; R1 -> buffer to read into
	; R2 -> amount of bytes to read
	; R0 <- error code (Nominal 0)
	; R1 <- bytes read
	PSH R1
	CALL vfs_fread
	CNZ R0
	POP R1
	JMPC ExecuteFile_error_fread

	; R1 has the buffer pointer to the new executable
	POP R0
	SUB R1
	STZ R3
	; R1 is adjusted for AO

	PSH R1
	ADO R1
	CALL 0
	ADO 0
	POP R1
	CALL outputExitCode
	
	ST KeyboardInterrupt $0xaf00
	ST 3 $0xafef					;; Display mode
	CALL RefreshDisplay

	ExecuteFile_error_dofree:
	LDZ R1
	CALL free

	ExecuteFile_error_dofclose:
	POP R0
	; R0 -> file pointer
	; R0 <- error code (Nominal 0)
	CALL vfs_fclose
	CNZ R0
	JMPC ExecuteFile_error_fclose
	RET

	ExecuteFile_filesize: .db 0

	ExecuteFile_error_malloc:
		LD R1 STR_SHELL_ERROR_MALLOC
		CALL PrintStringAtCursor
		POP R3
		JMP ExecuteFile_error_dofclose
	ExecuteFile_error_stat:
		LD R1 STR_VFS_ERROR_STAT
		CALL PrintErrorMessage
		POP
		RET
	ExecuteFile_error_notExec:
		LD R1 STR_SHELL_ERROR_NOTEXEC
		CALL PrintLineAtCursor
		POP R0
		CALL free
		POP
		RET
	ExecuteFile_error_fopen:
		LD R1 STR_VFS_ERROR_FOPEN
		CALL PrintErrorMessage
		RET
	ExecuteFile_error_fread:
		LD R1 STR_VFS_ERROR_FREAD
		CALL PrintErrorMessage
		POP R3
		JMP ExecuteFile_error_dofclose
	ExecuteFile_error_fclose:
		LD R1 STR_VFS_ERROR_FCLOSE
		CALL PrintErrorMessage
		RET

; R0 -> disk number
; R1 -> ptr to absolute path
; R2 -> ptr to file name
ScriptFile:
	LD R3 0
	; R0 -> disk number
	; R1 -> ptr to absolute path
	; R2 -> ptr to file name
	; R3 -> fopen mode (1 to create if not exist, else 0)
	; R0 <- error code (Nominal 0)
	; R1 <- file Pointer
	PSH
		CALL vfs_stat
		CNZ R0
		JMPC ScriptFile_error_stat
		PSH R3
		ADD R3 2
		DD R3
		LDD R3
		ST R3 $ScriptFile_filesize
		POP R0
		CALL free
	POP
	CALL vfs_fopen
	CNZ R0
	JMPC ScriptFile_error_fopen
	PSH R1
	LDZ R1

	; R0 has the file pointer
	; ScriptFile_filesize has the file size
	PSH R0
	LD R0 $ScriptFile_filesize
	CALL malloc
	STZ R1
	POP R0
	CEZ R1
	JMPC ScriptFile_error_malloc

	LD R2 $ScriptFile_filesize
	; R0 -> file Pointer
	; R1 -> buffer to read into
	; R2 -> amount of bytes to read
	; R0 <- error code (Nominal 0)
	; R1 <- bytes read
	PSH R1
	CALL vfs_fread
	CNZ R0
	POP R1
	JMPC ScriptFile_error_fread

	; R1 has the buffer pointer to the new executable
	PSH
	LDZ R1
	CALL runScript
	POP


	ScriptFile_error_dofree:
	LDZ R1
	CALL free

	ScriptFile_error_dofclose:
	POP R0
	; R0 -> file pointer
	; R0 <- error code (Nominal 0)
	CALL vfs_fclose
	CNZ R0
	JMPC ScriptFile_error_fclose
	RET

	ScriptFile_filesize: .db 0

	ScriptFile_error_malloc:
		LD R1 STR_SHELL_ERROR_MALLOC
		CALL PrintStringAtCursor
		POP R0
		RET
	ScriptFile_error_stat:
		LD R1 STR_VFS_ERROR_STAT
		CALL PrintErrorMessage
		POP
		RET
	ScriptFile_error_fopen:
		LD R1 STR_VFS_ERROR_FOPEN
		CALL PrintErrorMessage
		RET
	ScriptFile_error_fread:
		LD R1 STR_VFS_ERROR_FREAD
		CALL PrintErrorMessage
		JMP ScriptFile_error_dofree
	ScriptFile_error_fclose:
		LD R1 STR_VFS_ERROR_FCLOSE
		CALL PrintErrorMessage
		RET

; R0 is string pointer to 0 terminated script with newlines
runScript:
	PSH
	ST 0 $runScript_done
	runScript_Loop:
		; Loop through each line
		; Copy each line into the buffer	
		LD R1 runScript_linebuffer
		runScript_Copy:
			DD R0
			INC R0
			LDD R2
			CE R2 0xa ; Newline
			JMPC runScript_LineDone
			CEZ R2
			JMPC runScript_Done
			DD R1
			STD R2
			INC R1
			JMP runScript_Copy

		runScript_Done:
		ST 1 $runScript_done
		runScript_LineDone:
		PSH R0
		DD R1
		STD 0
		SUB R1 runScript_linebuffer
		LDZ R1
		LD R1 runScript_linebuffer
		; R0 is the pointer
		; R1 is the length
		CALL shellExec

		; LD R1 runScript_linebuffer
		; CALL PrintLineAtCursor

		POP R0
		CEZ $runScript_done
		JMPC runScript_Loop


	POP
	RET
	runScript_done: .db 0 ; One line's width of buffer
	runScript_linebuffer: .dz 81 ; One line's width of buffer

; No arguments, free to destroy all
handleUserInput:
	LD R0 $CommandEnd
	SUB R0 $LastCursor

	LD R1 $LastCursor
	ADD R1 CharMem

	CALL shellExec
	RET

; R0 is the return code from the program
outputExitCode:
	DBG R0
	CEZ R0
	RETC ; COMMENT OUT TO ALSO DISPLAY 0
	CALL PrintNumberAtCursor
	CALL CursorNewline
	RET

; R0 is the length
; R1 is the pointer
shellExec:
	ST R0 $shellExec_InputSize
	ST R1 $shellExec_InputPointer

	DD R1
	LDD R2
	CEZ R2
	RETC
	; String Index into table of routine pointers
	
	LD R2 shellExec_Table
	shellExec_LookupLoop:
		DD R1
		LDD R0
		DD R2
		LDD R3

		; If the character in the input is a space, replace it with a 0 in the register states so that commands match even with arguments
		CNE R0 ' '
		JMPC shellExec_NotASpace
		LD R0 0
		shellExec_NotASpace:
		
		; R0 is character
		; R1 is character address in user input
		; R2 is the pointer to the string to compare to
		; R3 is the table character
		PSH R0
			XOR R3 ; R0 XOR R3 => R0 (Checks if R0 and R3 are equal)
			CEZ R0
		POP R0
		JMPC shellExec_Match
		shellExec_NotMatch:
			; This string is a miss, we need to scan to the next one, skip over the pointer
			; and prepare for the next search
			shellExec_NotMatchSkip:
				CNZ R3
				INC R2
				DD R2
				LDD R3
				JMPC shellExec_NotMatchSkip ; Scan through the table for the next zero

			ADD R2 2 ; Since it was a miss, skip the pointer and the next zero
			; Now, before we go back, lets reset the user input pointer as well
			LD R1 $shellExec_InputPointer
			; Better luck next time!

			DD R2
			LDD R3
			CNZ R3
			JMPC shellExec_LookupLoop
			; to check against is zero, then we've exhausted the table
			JMP shellExec_Exhausted ; If the first character in the string

		shellExec_Match:
			; The current characters match. Scan to the next ones. If the current ones are both zeroes
			; (We've reached the end of both strings) then we need to escape the loop and declare a match
			INC R2
			INC R1
			CNZ R0
			JMPC shellExec_LookupLoop

	; MATCH!!! Both strings have ended.
	LD R0 $shellExec_InputSize

	DD R2 ; Load the pointer to the function
	LDD R3
	DD R3
	; Commands are run so that
	; R0 is the length of the input
	; R1 is a pointer to the arguments (Starting on the first char after the space)
	CALD ; Call that pointer

	RET
	shellExec_Exhausted:
		LD R1 STR_SHELL_ERROR_NOCMD
		CALL PrintLineAtCursor
		RET
	shellExec_InputSize: .db 0
	shellExec_InputPointer: .db 0

; Why did I only think to add this now?
CHECK_DISK_ACTIVE:
	PSH
	LD R0 $currentDisk
	CALL vfs_disk_active
	JMPC CHECK_DISK_ACTIVE_yes
		LD R1 STR_SHELL_ERROR_NODISK
		CALL PrintLineAtCursor
		POP
		; BAD BEHAVIOR
		; Pops the return pointer and leapfrogs
		POP R0
		RET

	CHECK_DISK_ACTIVE_yes:
	POP
	RET

CMD_CD:
	SUB R0 2
	CLT R0 1
	JMPC CMD_CD_NOARG
	CALL trimString
	CALL MakeAbsoluteDir
	PSH R1
	LD R2 CMD_CD_newDirectory
	CMD_CD_LOOP_1:
		DD R1
		LDD R0
		DD R2
		STD R0
		INC R1
		INC R2
		CNZ R0
		JMPC CMD_CD_LOOP_1
	POP R1

	CALL SplitDirectory
	CE R2 0xffff
	JMPC CMD_CD_badpath_invalid
	CALL CHECK_DISK_ACTIVE
	PSH
	LD R0 $currentDisk ; Disk
	CALL vfs_list
	CNZ R0
	JMPC CMD_CD_BADPATH
	LDZ R3
	CALL free
	POP

	LD R1 CMD_CD_newDirectory
	LD R2 currentDirectory

	CMD_CD_LOOP_2:
		DD R1
		LDD R0
		DD R2
		STD R0
		INC R1
		INC R2
		CNZ R0
		JMPC CMD_CD_LOOP_2
	RET
	CMD_CD_NOARG:
	LD R1 STR_SHELL_ERROR_NOARG
	CALL PrintLineAtCursor
	RET

	CMD_CD_BADPATH:
		LD R1 STR_VFS_ERROR_LIST
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP
		RET
	CMD_CD_badpath_invalid:
		LD R1 STR_SHELL_ERROR_BADPATH
		CALL PrintLineAtCursor
		RET

	CMD_CD_newDirectory: 
		.ds "/"
		.dz (12+1)*8 +1

CMD_ECHO:
	SUB R0 4
	CLT R0 1
	JMPC CMD_ECHO_NOARG
	CALL PrintLineAtCursor
	RET
	CMD_ECHO_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET

CMD_PWD:
	LD R1 currentDirectory
	CALL PrintLineAtCursor
	RET

CMD_LS:
	SUB R0 2
	CGT R0 1
	JMPC CMD_LS_ARG
	LD R1 currentDirectory
	CMD_LS_ARG:
	CALL trimString
	LD R2 1
	CALL MakeAbsoluteDir
	CALL SplitDirectory
	CE R2 0xffff
	JMPC CMD_LS_badpath
	; PSH R2
	CALL CHECK_DISK_ACTIVE
	LD R0 $currentDisk ; Disk
	CALL vfs_list
	CNZ R0
	JMPC PRINT_CMD_LS_ERROR

	PSH R3

	LDZ R3
	LD R1 0
	LD R3 0
	VFSLIST_debug:
		DD R0
		LDD R2
		CEZ R2
		JMPC VFSLIST_debug_zero
			PSH
			LDZ R2
			CALL PrintAtCursor
			POP
		JMP VFSLIST_debug_nonzero
		VFSLIST_debug_zero:
		CEZ R3
		JMPC VFSLIST_debug_done
		VFSLIST_debug_nonzero:
		INC R0
		INC R1
		INC R3
		CNE R3 12
		JMPC VFSLIST_debug_cont
		LD R3 0
			PSH
			LD R0 ' '
			CALL PrintAtCursor
			POP
		VFSLIST_debug_cont:
		CLT R1 96
		JMPC VFSLIST_debug

	VFSLIST_debug_done:
	PSH R1
	CALL CursorNewline
	POP R1
	POP R0
	CALL free
	RET

	PRINT_CMD_LS_ERROR:
		LD R1 STR_VFS_ERROR_LIST
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		RET
	CMD_LS_badpath:
		LD R1 STR_SHELL_ERROR_BADPATH
		CALL PrintLineAtCursor
		RET

CMD_MKDIR:
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	SUB R0 5
	CLT R0 1
	JMPC CMD_MKDIR_NOARG
	CALL trimString
	CALL MakeAbsoluteDir
	CALL SplitDirectory
	CE R2 0xffff
	JMPC CMD_MKDIR_badpath
	CALL CHECK_DISK_ACTIVE

	; R1 has pointer to path
	; R2 has pointer to file name

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	CALL vfs_mkdir
	CNZ R0
	CALLC PRINT_CMD_MKDIR_ERROR
	RET

	CMD_MKDIR_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET
	CMD_MKDIR_badpath:
		LD R1 STR_SHELL_ERROR_BADPATH
		CALL PrintLineAtCursor
		RET
	PRINT_CMD_MKDIR_ERROR:
		PSH R1
		LD R1 STR_VFS_ERROR_MKDIR
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		RET

CMD_RMDIR:
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	SUB R0 5
	CLT R0 1
	JMPC CMD_RMDIR_NOARG
	CALL trimString
	CALL MakeAbsoluteDir
	CALL SplitDirectory
	CE R2 0xffff
	JMPC CMD_RMDIR_badpath
	CALL CHECK_DISK_ACTIVE

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	CALL vfs_rmdir
	CNZ R0
	CALLC PRINT_CMD_RMDIR_ERROR
	RET

	CMD_RMDIR_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET
	CMD_RMDIR_badpath:
		LD R1 STR_SHELL_ERROR_BADPATH
		CALL PrintLineAtCursor
		RET
	PRINT_CMD_RMDIR_ERROR:
		PSH R1
		LD R1 STR_VFS_ERROR_RMDIR
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		RET

CMD_HALT:
	LD R1 STR_SHELL_NOTIF_HALT
	CALL PrintLineAtCursor
	HLT

CMD_CLEAR:
	CALL ClearScreen
	RET

CMD_TOUCH:
	SUB R0 5
	CLT R0 1
	JMPC CMD_TOUCH_NOARG
	CALL trimString
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	;
	CALL MakeAbsoluteFile
	CALL SplitDir
	CE R2 0xffff
	JMPC CMD_TOUCH_badpath
	CALL CHECK_DISK_ACTIVE

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	LD R3 1
	CALL vfs_fopen
	CNZ R0
	JMPC PRINT_CMD_TOUCH_ERROR

	LDZ R1
	CALL vfs_fclose
	RET

	CMD_TOUCH_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET
	CMD_TOUCH_badpath:
		LD R1 STR_SHELL_ERROR_BADPATH
		CALL PrintLineAtCursor
		RET
	PRINT_CMD_TOUCH_ERROR:
		PSH R1
		LD R1 STR_VFS_ERROR_FOPEN
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		RET

CMD_RM:
	SUB R0 2
	CLT R0 1
	JMPC CMD_RM_NOARG
	CALL trimString
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	CALL MakeAbsoluteFile
	CALL SplitDir
	CE R2 0xffff
	JMPC CMD_RM_badpath
	CALL CHECK_DISK_ACTIVE

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	CALL vfs_rm
	CNZ R0
	JMPC PRINT_CMD_RM_ERROR
	RET

	CMD_RM_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET
	CMD_RM_badpath:
		LD R1 STR_SHELL_ERROR_BADPATH
		CALL PrintLineAtCursor
		RET
	PRINT_CMD_RM_ERROR:
		PSH R1
		LD R1 STR_VFS_ERROR_RM
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		POP R2
		RET

CMD_CAT:
	SUB R0 3
	CLT R0 1
	JMPC CMD_CAT_NOARG
	CALL trimString
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	CALL MakeAbsoluteFile
	CALL SplitDir
	CE R2 0xffff
	JMPC CMD_CAT_badpath
	CALL CHECK_DISK_ACTIVE

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	LD R3 0
	CALL vfs_fopen
	CNZ R0
	JMPC PRINT_CMD_CAT_ERROR_fopen
	LDZ R1

	CMD_CAT_freadloop:
		PSH R0
		; R0 is file pointer
		LD R1 CMD_CAT_buffer
		LD R2 64
		; R0 -> File Pointer
		; R1 -> Buffer to read into
		; R2 -> Amount of bytes to read
		; R0 <- Error code (Nominal 0)
		; R1 <- bytes read
		CALL vfs_fread
		CNZ R0
		POP R0
		JMPC PRINT_CMD_CAT_ERROR_fread


		PSH
		LDZ R1
		LD R1 CMD_CAT_buffer
		CALL PrintBufAtCursor
		POP

		CNE R1 64
		JMPC CMD_CAT_freadloop_done

		JMP CMD_CAT_freadloop

	CMD_CAT_freadloop_done:
	CALL vfs_fclose

	CALL CursorNewline

	RET

	CMD_CAT_buffer: .dz 65

	CMD_CAT_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET
	CMD_CAT_badpath:
		LD R1 STR_SHELL_ERROR_BADPATH
		CALL PrintLineAtCursor
		RET
	PRINT_CMD_CAT_ERROR_fread:
		PSH R1
		LD R1 STR_VFS_ERROR_FREAD
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		RET

	PRINT_CMD_CAT_ERROR_fopen:
		PSH R1
		LD R1 STR_VFS_ERROR_FOPEN
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		POP R2
		RET

CMD_STAT:
	SUB R0 4
	CLT R0 1
	JMPC CMD_STAT_NOARG
	CALL trimString
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	CALL MakeAbsoluteFile
	CALL SplitDir
	CE R2 0xffff
	JMPC CMD_STAT_badpath
	CALL CHECK_DISK_ACTIVE

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	CALL vfs_stat
	CNZ R0
	JMPC PRINT_CMD_STAT_ERROR

	PSH R3

	; Filetype
	DD R3
	LDD R0 ; Flags
	PSH R0
	AND R0 0b100
	CNZ R0
	LD R0 'E'
	JMPC CMD_STAT_executable
	LD R0 'N'
	CMD_STAT_executable:
	CALL PrintAtCursor
	POP R0
	AND R0 0b10
	CNZ R0
	LD R0 'D'
	JMPC CMD_STAT_directory
	LD R0 'F'
	CMD_STAT_directory:
	CALL PrintAtCursor

	INC R3

	LD R0 ' '
	CALL PrintAtCursor

	; First page
	DD R3
	LDD R0 ; first page
	CALL PrintNumberAtCursor

	INC R3

	LD R0 ' '
	CALL PrintAtCursor

	; File Size
	DD R3
	LDD R0 ; file size
	CALL PrintNumberAtCursor

	CALL CursorNewline

	POP R0
	CALL free ; free the stat struct
	RET

	CMD_STAT_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET
	CMD_STAT_badpath:
		LD R1 STR_SHELL_ERROR_BADPATH
		CALL PrintLineAtCursor
		RET
	PRINT_CMD_STAT_ERROR:
		PSH R1
		LD R1 STR_VFS_ERROR_STAT
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		RET

CMD_TESTFILE:
	CALL CHECK_DISK_ACTIVE
	LD R0 0
	LD R1 testFilePath
	LD R2 testFileName
	LD R3 1
	; R0 -> Disk number
	; R0 <- Error code (Nominal 0)
	; R1 -> ptr to absolute path
	; R1 <- File Pointer
	; R2 -> ptr to file name
	CALL vfs_fopen

	PSH R0
	LD R1 testFileContents1
	LD R2 $testFileLength1
	; R0 -> File Pointer
	; R0 <- Error code (Nominal 0)
	; R1 -> Buffer to read from
	; R1 <- bytes read
	; R2 -> Amount of bytes to read
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 0
	CALL vfs_fseek
	POP R0
	PSH R0
	LD R1 testFileReadBuffer
	LD R2 $testFileReadSize
	CALL vfs_fread
	POP R0
	CALL vfs_fclose
	RET

	testFilePath:
	.ds "/"
	.db 0
	testFileName:
	.ds "tf"
	.dz 12
	testFileLength1:
	.db 10
	testFileContents1:
	.ds "0123456789"
	testFileLength2:
	.db 26
	testFileContents3:
	.ds "abcdefghijklmnopqrstuvwxyz"
	testFileContents2:
	.ds "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	testFileLength3:
	.db 26*2

	testFileReadBuffer:
	.dz 128*3
	testFileReadSize:
	.db 128

CMD_PEEK:
	SUB R0 4
	CLT R0 1
	JMPC CMD_PEEK_NOARG
	; Need to parse in the number given
	; R1 has a pointer to a number string either in decimal or hex
	CALL parseUserNumberInput
	CNZ R0
	JMPC PRINT_CMD_PEEK_ERROR

	; R2 has the address value
	DD R2
	LDD R0
	CALL PrintNumberAtCursor
	CALL CursorNewline
	RET
	CMD_PEEK_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET

	PRINT_CMD_PEEK_ERROR:
		LD R1 STR_SHELL_ERROR_INTPARSE
		CALL PrintErrorMessage
		RET

CMD_POKE:
	SUB R0 4
	CLT R0 1
	JMPC CMD_PEEK_NOARG
	; Need to parse in the number given
	; R1 has a pointer to a number string either in decimal or hex
	CALL parseUserNumberInput
	CNZ R0
	JMPC PRINT_CMD_POKE_ERROR

	DD R1
	LDD R3
	CEZ R3
	JMPC CMD_POKE_NOARG

	INC R1
	PSH R2
	CALL parseUserNumberInput
	CNZ R0
	JMPC PRINT_CMD_POKE_ERROR
	POP R3
	DD R3
	STD R2
	RET
	CMD_POKE_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET

	PRINT_CMD_POKE_ERROR_2:
		POP R2
	PRINT_CMD_POKE_ERROR:
		LD R1 STR_SHELL_ERROR_INTPARSE
		CALL PrintErrorMessage
		RET

CMD_SH:
	SUB R0 2
	CLT R0 1
	JMPC CMD_SH_NOARG
	CALL trimString
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	;
	CALL MakeAbsoluteFile
	CALL SplitDir
	CE R2 0xffff
	JMPC CMD_SH_badpath
	CALL CHECK_DISK_ACTIVE
	PSH R2

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name

	CALL ScriptFile

	POP R0
	CALL free
	RET

	CMD_SH_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET
	CMD_SH_badpath:
		LD R1 STR_SHELL_ERROR_BADPATH
		CALL PrintLineAtCursor
		RET

CMD_RUN:
	SUB R0 3
	CLT R0 1
	JMPC CMD_RUN_NOARG
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string

	PSH R1
	POP R3
	CMD_RUN_spaceLoop:
		DD R3
		LDD R2
		CEZ R2
		JMPC CMD_RUN_spaceLoop_exit
		INC R3
		CNE R2 ' '
		JMPC CMD_RUN_spaceLoop
		; It's a space!
		; TODO: spaceloop to find multiple spaces between arguments
		STD 0 ; Overright with a zero for other functions
		; Then leave R3 as the next character for the arguments.

	CMD_RUN_spaceLoop_exit:
	CALL trimString ; TODO: not working right
	CALL MakeAbsoluteFile
	CALL SplitDir
	CE R2 0xffff
	JMPC CMD_RUN_badpath
	CALL CHECK_DISK_ACTIVE

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name

	CALL ExecuteFile
	RET

	CMD_RUN_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET
	CMD_RUN_badpath:
		LD R1 STR_SHELL_ERROR_BADPATH
		CALL PrintLineAtCursor
		RET

CMD_FLAGS:
	SUB R0 5
	CLT R0 1
	JMPC CMD_FLAGS_NOARG
	; R0 has the argument length
	; R1 has the argument string
	ST 0 $CMD_FLAGS_flag
	ST 0 $CMD_FLAGS_mask

	PSH R1
	CMD_FLAGS_splitscan:
	INC R1
	DD R1
	LDD R2
	CEZ R2
	JMPC CMD_FLAGS_noflags
	CNE R2 ' '
	JMPC CMD_FLAGS_splitscan
	DD R1
	STD 0
	CMD_FLAGS_flagLoop:
	INC R1
	; now R1 points to the beginning of the flags
	DD R1
	LDD R2
	CE R2 '+'
	JMPC CMD_FLAGS_ADD
	CE R2 '-'
	JMPC CMD_FLAGS_SUB
	JMP CMD_FLAGS_SYNTAX

	CMD_FLAGS_ADD:
	INC R1
	DD R1
	LDD R2
	CE R2 'x'
	LD R3 0b100
	JMPC CMD_FLAGS_ADD_do
	JMP CMD_FLAGS_unknownFlag

	CMD_FLAGS_ADD_do:
	LDZ R3
	PSH R0
	LD R3 $CMD_FLAGS_flag
	OR R3 ; R0 = new flag bit OR old flag bit
	ST R0 $CMD_FLAGS_flag
	POP R0
	LD R3 $CMD_FLAGS_mask
	OR R3 ; R0 = new mask bit OR old mask bit
	ST R0 $CMD_FLAGS_mask
	JMP CMD_FLAG_doneOne
	
	CMD_FLAGS_SUB:
	INC R1
	DD R1
	LDD R2
	CE R2 'x'
	LD R3 0b100
	JMPC CMD_FLAGS_SUB_do
	JMP CMD_FLAGS_unknownFlag

	CMD_FLAGS_SUB_do:
	LDZ R3
	; Disable by setting in mask but not in flag
	LD R3 $CMD_FLAGS_mask
	OR R3 ; R0 = new mask bit OR old mask bit
	ST R0 $CMD_FLAGS_mask
	JMP CMD_FLAG_doneOne

	CMD_FLAG_doneOne:
	INC R1
	DD R1
	LDD R2
	CE R2 ' '
	JMPC CMD_FLAGS_flagLoop
	CNE R2 0
	JMPC CMD_FLAGS_SYNTAX

	POP R1

	CALL MakeAbsoluteFile
	CALL SplitDir
	CE R2 0xffff
	JMPC CMD_FLAGS_badpath
	CALL CHECK_DISK_ACTIVE

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	LD R3 CMD_FLAGS_flag
	; DBG $CMD_FLAGS_flag
	; DBG $CMD_FLAGS_mask
	CALL vfs_flags
	CNZ R0
	JMPC PRINT_CMD_FLAGS_ERROR
	RET

	CMD_FLAGS_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET
	CMD_FLAGS_noflags:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		POP R1
		RET
	CMD_FLAGS_SYNTAX:
		LD R1 CMD_FLAGS_syntax_str
		CALL PrintLineAtCursor
		POP R1
		RET
	CMD_FLAGS_unknownFlag:
		LD R1 CMD_FLAGS_unknownFlag_str
		CALL PrintLineAtCursor
		POP R1
		RET
	CMD_FLAGS_badpath:
		LD R1 STR_SHELL_ERROR_BADPATH
		CALL PrintLineAtCursor
		RET
	PRINT_CMD_FLAGS_ERROR:
		LD R1 STR_VFS_ERROR_FLAGS
		CALL PrintErrorMessage
		POP R0
		RET
	CMD_FLAGS_noflags_str:
		.ds "FLAGS:Must provide flags"
		.db 0
	CMD_FLAGS_syntax_str:
		.ds "FLAGS:INVALID SYNTAX"
		.db 0xa
		.ds "Arguments must be + or -, then the flag letter"
		.db 0
	CMD_FLAGS_unknownFlag_str:
		.ds "FLAGS:Unknown flag"
		.db 0
	CMD_FLAGS_flag: .db 0
	CMD_FLAGS_mask: .db 0

; R0 -> Character
ApplyShift:
	PSH R1
	LD R1 $KB_Mods
	AND R1 0b0001
	CEZ R1
	POP R1
	RETC
	SUB R0 32
	ADD R0 ShiftTable
	DD R0
	LDD R0
	RET

; R0 -> State
; R1 -> Modifier Position
SetModifier:
	PSH R0
	LD R0 1
	SHL R1
	NOT R0
	AND R0 $KB_Mods ; Mask out the bit for the specific modifier
	STZ R2
	POP R0
	SHL R1
	ADD R2 ; Add masked to state
	ST R0 $KB_Mods
	RET

; Table Format: string0ptr0...string0ptr00
shellExec_Table:
	.ds "ls"
	.db 0
	.db CMD_LS
	.db 0
	.ds "halt"
	.db 0
	.db CMD_HALT
	.db 0
	.ds "exit"
	.db 0
	.db CMD_HALT
	.db 0
	.ds "mkdir"
	.db 0
	.db CMD_MKDIR
	.db 0
	.ds "rmdir"
	.db 0
	.db CMD_RMDIR
	.db 0
	.ds "clear"
	.db 0
	.db CMD_CLEAR
	.db 0
	.ds "cd"
	.db 0
	.db CMD_CD
	.db 0
	.ds "echo"
	.db 0
	.db CMD_ECHO
	.db 0
	.ds "pwd"
	.db 0
	.db CMD_PWD
	.db 0
	.ds "touch"
	.db 0
	.db CMD_TOUCH
	.db 0
	.ds "rm"
	.db 0
	.db CMD_RM
	.db 0
	.ds "tf"
	.db 0
	.db CMD_TESTFILE
	.db 0
	.ds "cat"
	.db 0
	.db CMD_CAT
	.db 0
	.ds "stat"
	.db 0
	.db CMD_STAT
	.db 0
	.ds "peek"
	.db 0
	.db CMD_PEEK
	.db 0
	.ds "poke"
	.db 0
	.db CMD_POKE
	.db 0
	.ds "sh"
	.db 0
	.db CMD_SH
	.db 0
	.ds "run"
	.db 0
	.db CMD_RUN
	.db 0
	.ds "flags"
	.db 0
	.db CMD_FLAGS
	.db 0
	.db 0

ShiftTable:
	.ds "       "    <_>?)!@#$%^&*( : +  "
	.ds "                           {|}  "
	.ds "~ABCDEFGHIJKLMNOPQRSTUVWXYZ     "

#DEF RAMDISKSIZE 0x1000
RAMDISK:
#RAMFS RAMDISKSIZE ramdisk1.txt
.ds "IMPORTANT"