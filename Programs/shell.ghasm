JMP PROG_START
#INC ./lib/kernel.ghasm
#INC ./lib/vfs.ghasm
#INC ./lib/vfsstrings.ghasm
#INC ./lib/ramdisk.ghasm
#INC ./lib/stringPrint.ghasm
#INC ./lib/charPrint.ghasm
#INC ./shellstrings.ghasm
PROG_START:


;; Char Print Routine (5f)
; 0xaf70: Character
; 0xaf71: X Pos
; 0xaf72: Y Pos
; 0xaf73: Font Address

; TODO: Self-test of sorts?
startup:
	ST 0b0000000000000001 $0xaff0	;; Background
	ST 0b0000011111001000 $0xaff1	;; Forground
	ST 3 $0xafef					;; Display mode

	ST printString $0xaf5e			;; Register printString as the string printing interrupt
	ST printChar $0xaf5f			;; Register printChar as the character printing interrupt

	LD R1 STR_SHELL_STARTUP
	CALL PrintLineAtCursor

	LD R0 RAMDISK
	LD R1 RAMDISKSIZE
	CALL ramdisk_init
	ST R0 $currentDisk

	LD R1 STR_SHELL_STARTUP_RAMDISK
	CALL PrintLineAtCursor

	LD R0 startupScript
	CALL runScript

	ST KeyboardInterrupt $0xaf00	;; Register Keyboard Interrupt

	LD R0 '>'
	CALL PrintAtCursor

	MV $Cursor $LastCursor

	loop:
		CALL blinkCursor
		CALL delay
		JMP loop
	HLT

delay:
	LD R0 0
	delayLoop:
		INC R0
		CNE R0 0x200
		JMPC delayLoop
	RET

blinkCursor:
	LD R0 $Timer
	INC R0
	ST R0 $Timer
	CE R0 0
	JMPC showCursor
	CE R0 0x8000
	JMPC hideCursor
	RET

	hideCursor:
		LD R1 $Cursor
		ADD R1 CharMem
		DD R1
		LDD R0
		CALL SetAtCursor
		RET

	showCursor:
		LD R0 '_' 			; Character
		CALL SetAtCursor
		RET

KeyboardInterrupt:
	IDIS
	PSH
	ST 0xffff $Timer
	LD R1 $0xafd0					; Get key state
	CE R1 0
	LD R0 $0xafd1					; Load the new character
	JMPC KI_Keyup

	CE R0 0x0008 ; Backspace
	JMPC KI_Backspace
	CE R0 0x000d ; Enter
	JMPC KI_Enter
	CE R0 0x00e3 ; L_Win
	JMPC KI_Win_Down
	CE R0 0x00e2 ; L_Alt
	JMPC KI_Alt_Down
	CE R0 0x00e1 ; L_Shift
	JMPC KI_Shift_Down
	CE R0 0x00e0 ; L_Control
	JMPC KI_Control_Down
	
	CALL ApplyShift

	LD R1 $Cursor
	ADD R1 CharMem
	DD R1
	STD R0

	CALL PrintAtCursor

	KeyboardInterruptExit:
	POP
	IEN
	RET

	KI_Keyup:
		CE R0 0x00e3 ; L_Win
		JMPC KI_Win_Up
		CE R0 0x00e2 ; L_Alt
		JMPC KI_Alt_Up
		CE R0 0x00e1 ; L_Shift
		JMPC KI_Shift_Up
		CE R0 0x00e0 ; L_Control
		JMPC KI_Control_Up
		JMP KeyboardInterruptExit
		
	KI_Win_Up:
		LD R0 0
		LD R1 3
		CALL SetModifier
		JMP KeyboardInterruptExit
	KI_Win_Down:
		LD R0 1
		LD R1 3
		CALL SetModifier
		JMP KeyboardInterruptExit
		
	KI_Alt_Up:
		LD R0 0
		LD R1 2
		CALL SetModifier
		JMP KeyboardInterruptExit
	KI_Alt_Down:
		LD R0 1
		LD R1 2
		CALL SetModifier
		JMP KeyboardInterruptExit

	KI_Shift_Up:
		LD R0 0
		LD R1 0
		CALL SetModifier
		JMP KeyboardInterruptExit
	KI_Shift_Down:
		LD R0 1
		LD R1 0
		CALL SetModifier
		JMP KeyboardInterruptExit
		
	KI_Control_Up:
		LD R0 0
		LD R1 1
		CALL SetModifier
		JMP KeyboardInterruptExit
	KI_Control_Down:
		LD R0 1
		LD R1 1
		CALL SetModifier
		JMP KeyboardInterruptExit

	KI_Backspace:
		LD R1 $Cursor
		CLT R1 $LastCursor
		JMPC KeyboardInterruptExit
		CE R1 $LastCursor
		JMPC KeyboardInterruptExit

		LD R0 ' '
		CALL SetAtCursor
		LD R1 $Cursor
		DEC R1
		ST R1 $Cursor
		ADD R1 CharMem
		DD R1
		STD ' '
		LD R0 ' '
		CALL SetAtCursor
		JMP KeyboardInterruptExit

	KI_Enter:
		LD R1 $Cursor
		ADD R1 CharMem
		DD R1
		STD 0				; Store a null terminator into charmem
		LD R0 ' '
		CALL SetAtCursor	; Display a space

		MV $Cursor $CommandEnd

		CALL CursorNewline

		CALL handleUserInput

		LD R0 '>'
		CALL PrintAtCursor

		MV $Cursor $LastCursor

		JMP KeyboardInterruptExit

; R0 is string pointer to 0 terminated script with newlines
runScript:
	PSH
	ST 0 $runScript_done
	runScript_Loop:
		; Loop through each line
		; Copy each line into the buffer	
		LD R1 runScript_linebuffer
		runScript_Copy:
			DD R0
			INC R0
			LDD R2
			; DBGC R2
			CE R2 0xa ; Newline
			JMPC runScript_LineDone
			CEZ R2
			JMPC runScript_Done
			DD R1
			STD R2
			INC R1
			JMP runScript_Copy

		runScript_Done:
		ST 1 $runScript_done
		runScript_LineDone:
		PSH R0
		DD R1
		STD 0
		SUB R1 runScript_linebuffer
		LDZ R1
		LD R1 runScript_linebuffer
		; R0 is the pointer
		; R1 is the length
		CALL shellExec

		; LD R1 runScript_linebuffer
		; CALL PrintLineAtCursor

		POP R0
		CEZ $runScript_done
		JMPC runScript_Loop


	POP
	RET
	runScript_done: .db 0 ; One line's width of buffer
	runScript_linebuffer: .dz 81 ; One line's width of buffer

; No arguments, free to destroy all
handleUserInput:
	LD R0 $CommandEnd
	SUB R0 $LastCursor

	LD R1 $LastCursor
	ADD R1 CharMem

	CALL shellExec
	RET

; R0 is the length
; R1 is the pointer
shellExec:
	ST R0 $shellExec_InputSize
	ST R1 $shellExec_InputPointer

	DD R1
	LDD R2
	CEZ R2
	RETC
	; String Index into table of routine pointers
	
	LD R2 shellExec_Table
	shellExec_LookupLoop:
		DD R1
		LDD R0
		DD R2
		LDD R3

		; If the character in the input is a space, replace it with a 0 in the register states so that commands match even with arguments
		CNE R0 ' '
		JMPC shellExec_NotASpace
		LD R0 0
		shellExec_NotASpace:
		
		; R0 is character
		; R1 is character address in user input
		; R2 is the pointer to the string to compare to
		; R3 is the table character
		PSH R0
			XOR R3 ; R0 XOR R3 => R0 (Checks if R0 and R3 are equal)
			CEZ R0
		POP R0
		JMPC shellExec_Match
		shellExec_NotMatch:
			; This string is a miss, we need to scan to the next one, skip over the pointer
			; and prepare for the next search
			shellExec_NotMatchSkip:
				CNZ R3
				INC R2
				DD R2
				LDD R3
				JMPC shellExec_NotMatchSkip ; Scan through the table for the next zero

			ADD R2 2 ; Since it was a miss, skip the pointer and the next zero
			; Now, before we go back, lets reset the user input pointer as well
			LD R1 $shellExec_InputPointer
			; Better luck next time!

			DD R2
			LDD R3
			CNZ R3
			JMPC shellExec_LookupLoop
			; to check against is zero, then we've exhausted the table
			JMP shellExec_Exhausted ; If the first character in the string

		shellExec_Match:
			; The current characters match. Scan to the next ones. If the current ones are both zeroes
			; (We've reached the end of both strings) then we need to escape the loop and declare a match
			INC R2
			INC R1
			CNZ R0
			JMPC shellExec_LookupLoop

	; MATCH!!! Both strings have ended.
	LD R0 $shellExec_InputSize

	DD R2 ; Load the pointer to the function
	LDD R3
	DD R3
	; Commands are run so that
	; R0 is the length of the input
	; R1 is a pointer to the arguments (Starting on the first char after the space)
	CALD ; Call that pointer

	RET
	shellExec_Exhausted:
		LD R1 STR_SHELL_ERROR_NOCMD
		CALL PrintLineAtCursor
		RET
	shellExec_InputSize: .db 0
	shellExec_InputPointer: .db 0

; Why did I only think to add this now?
CHECK_DISK_ACTIVE:
	PSH
	LD R0 $currentDisk
	CALL vfs_disk_active
	JMPC CHECK_DISK_ACTIVE_yes
		LD R1 STR_SHELL_ERROR_NODISK
		CALL PrintLineAtCursor
		POP
		; BAD BEHAVIOR
		; Pops the return pointer and leapfrogs
		POP R0
		RET

	CHECK_DISK_ACTIVE_yes:
	POP
	RET

CMD_CD:
	SUB R0 2
	CLT R0 1
	JMPC CMD_CD_NOARG
	CALL MakeAbsoluteDir
	CALL CHECK_DISK_ACTIVE
	; R1 has pointer to whole path
	PSH
	LD R0 $currentDisk ; Disk
	CALL vfs_list
	CNZ R0
	JMPC CMD_CD_BADPATH
	LDZ R3
	CALL free
	POP

	LD R2 currentDirectory

	CMD_CD_LOOP:
		DD R1
		LDD R0
		DD R2
		STD R0
		INC R1
		INC R2
		CNZ R0
		JMPC CMD_CD_LOOP
	RET
	CMD_CD_NOARG:
	LD R1 STR_SHELL_ERROR_NOARG
	CALL PrintLineAtCursor
	RET

	CMD_CD_BADPATH:
		LD R1 STR_VFS_ERROR_LIST
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP
		RET

CMD_ECHO:
	CALL PrintLineAtCursor
	RET

CMD_PWD:
	LD R1 currentDirectory
	CALL PrintLineAtCursor
	RET

CMD_LS:
	CALL CHECK_DISK_ACTIVE
	LD R0 $currentDisk ; Disk
	LD R1 currentDirectory ; Ptr to path
	CALL vfs_list
	CNZ R0
	JMPC PRINT_CMD_LS_ERROR

	PSH R3

	LDZ R3
	LD R1 0
	LD R3 0
	VFSLIST_debug:
		DD R0
		LDD R2
		CEZ R2
		JMPC VFSLIST_debug_zero
			PSH
			LDZ R2
			CALL PrintAtCursor
			POP
		JMP VFSLIST_debug_nonzero
		VFSLIST_debug_zero:
		CEZ R3
		JMPC VFSLIST_debug_done
		VFSLIST_debug_nonzero:
		INC R0
		INC R1
		INC R3
		CNE R3 12
		JMPC VFSLIST_debug_cont
		LD R3 0
			PSH
			LD R0 ' '
			CALL PrintAtCursor
			POP
		VFSLIST_debug_cont:
		CLT R1 96
		JMPC VFSLIST_debug

	VFSLIST_debug_done:
	PSH R1
	CALL CursorNewline
	POP R1
	POP R0
	CALL free
	RET

	PRINT_CMD_LS_ERROR:
		PSH R1
		LD R1 STR_VFS_ERROR_LIST
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		RET

CMD_MKDIR:
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	SUB R0 5
	CLT R0 1
	JMPC CMD_MKDIR_NOARG
	CALL MakeAbsoluteDir
	CALL SplitDirectory
	CALL CHECK_DISK_ACTIVE
	PSH R2

	; PSH
	; CALL PrintLineAtCursor
	; POP

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	CALL vfs_mkdir
	CNZ R0
	CALLC PRINT_CMD_MKDIR_ERROR

	POP R0
	CALL free
	RET

	CMD_MKDIR_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET

	PRINT_CMD_MKDIR_ERROR:
		PSH R1
		LD R1 STR_VFS_ERROR_MKDIR
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		RET

CMD_RMDIR:
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	SUB R0 5
	CLT R0 1
	JMPC CMD_RMDIR_NOARG
	CALL MakeAbsoluteDir
	CALL SplitDirectory
	CALL CHECK_DISK_ACTIVE
	PSH R2

	; PSH
	; CALL PrintLineAtCursor
	; POP

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	CALL vfs_rmdir
	CNZ R0
	CALLC PRINT_CMD_RMDIR_ERROR

	POP R0
	CALL free
	RET

	CMD_RMDIR_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET

	PRINT_CMD_RMDIR_ERROR:
		PSH R1
		LD R1 STR_VFS_ERROR_RMDIR
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		RET

CMD_HALT:
	LD R1 STR_SHELL_NOTIF_HALT
	CALL PrintLineAtCursor
	HLT

CMD_CLEAR:
	ST 0 $Cursor
	; LD R2 CharMem
	LD R3 0x1000

	CMD_CLEAR_LOOP:
		LD R0 ' '
		CALL PrintAtCursor ; Clear display
		; DD R2
		; STD ' '
		; INC R2 ; Clear char mem
		DEC R3
		CNZ R3
		JMPC CMD_CLEAR_LOOP
	ST 0 $Cursor
	RET

CMD_TOUCH:
	SUB R0 5
	CLT R0 1
	JMPC CMD_MKDIR_NOARG
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	;
	CALL MakeAbsoluteFile
	CALL SplitPath
	CALL CHECK_DISK_ACTIVE
	PSH R2

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	CALL vfs_fopen
	CNZ R0
	JMPC PRINT_CMD_TOUCH_ERROR

	LDZ R1
	CALL vfs_fclose

	POP R0
	CALL free
	RET

	CMD_TOUCH_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET

	PRINT_CMD_TOUCH_ERROR:
		PSH R1
		LD R1 STR_VFS_ERROR_FOPEN
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		POP R2
		RET

CMD_RM:
	SUB R0 2
	CLT R0 1
	JMPC CMD_RM_NOARG
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	;
	CALL MakeAbsoluteFile
	CALL SplitPath
	CALL CHECK_DISK_ACTIVE
	PSH R2

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	CALL vfs_rm
	CNZ R0
	JMPC PRINT_CMD_RM_ERROR

	POP R0
	CALL free
	RET

	CMD_RM_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET

	PRINT_CMD_RM_ERROR:
		PSH R1
		LD R1 STR_VFS_ERROR_RM
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		POP R2
		RET

CMD_CAT:
	SUB R0 3
	CLT R0 1
	JMPC CMD_CAT_NOARG
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	CALL MakeAbsoluteFile
	CALL SplitPath
	CALL CHECK_DISK_ACTIVE
	PSH R2

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	LD R3 0
	CALL vfs_fopen
	CNZ R0
	JMPC PRINT_CMD_CAT_ERROR_fopen
	LDZ R1

	CMD_CAT_freadloop:
		PSH R0
		; R0 is file pointer
		LD R1 CMD_CAT_buffer
		LD R2 64
		; R0 -> File Pointer
		; R1 -> Buffer to read into
		; R2 -> Amount of bytes to read
		; R0 <- Error code (Nominal 0)
		; R1 <- bytes read
		CALL vfs_fread
		CNZ R0
		POP R0
		JMPC PRINT_CMD_CAT_ERROR_fread


		PSH
		DBG R1
		LDZ R1
		LD R1 CMD_CAT_buffer
		CALL PrintBufAtCursor
		POP

		CNE R1 64
		JMPC CMD_CAT_freadloop_done

		JMP CMD_CAT_freadloop

	CMD_CAT_freadloop_done:
	CALL vfs_fclose

	CALL CursorNewline

	POP R0
	CALL free
	RET

	CMD_CAT_buffer: .dz 65

	CMD_CAT_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET

	PRINT_CMD_CAT_ERROR_fread:
		PSH R1
		LD R1 STR_VFS_ERROR_FREAD
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		POP R2
		RET

	PRINT_CMD_CAT_ERROR_fopen:
		PSH R1
		LD R1 STR_VFS_ERROR_FOPEN
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		POP R2
		RET

CMD_STAT:
	SUB R0 2
	CLT R0 1
	JMPC CMD_STAT_NOARG
	; R1 has pointer to 0 terminated string
	; Need to convert to an 12 char padded string
	CALL MakeAbsoluteFile
	CALL SplitPath
	CALL CHECK_DISK_ACTIVE
	PSH R2

	; R1 has pointer to path
	; R2 has pointer to file name
	; Stack has pointer to file name to free it

	LD R0 $currentDisk ; Disk
	; LD R1 currentDirectory ; Ptr to path
	; R2 is pointer to file name
	CALL vfs_stat
	CNZ R0
	JMPC PRINT_CMD_STAT_ERROR

	PSH R3

	; Filetype
	DD R3
	LDD R0 ; Flags
	AND R0 0b10
	CNZ R0
	LD R0 'D'
	JMPC CMD_STAT_notFile
	LD R0 'F'
	CMD_STAT_notFile:
	CALL PrintAtCursor

	INC R3

	LD R0 ' '
	CALL PrintAtCursor

	; First page
	DD R3
	LDD R0 ; first page
	CALL PrintNumberAtCursor

	INC R3

	LD R0 ' '
	CALL PrintAtCursor

	; File Size
	DD R3
	LDD R0 ; file size
	CALL PrintNumberAtCursor

	CALL CursorNewline

	POP R0
	CALL free ; free the stat struct

	POP R0
	CALL free ; free the file name
	RET

	CMD_STAT_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET

	PRINT_CMD_STAT_ERROR:
		PSH R1
		LD R1 STR_VFS_ERROR_STAT
		; R0 has the error number
		; R1 has the error message table
		CALL PrintErrorMessage
		POP R1
		POP R2
		RET

CMD_TESTFILE:
	CALL CHECK_DISK_ACTIVE
	LD R0 0
	LD R1 testFilePath
	LD R2 testFileName
	LD R3 1
	; R0 -> Disk number
	; R0 <- Error code (Nominal 0)
	; R1 -> ptr to absolute path
	; R1 <- File Pointer
	; R2 -> ptr to file name
	CALL vfs_fopen

	PSH R0
	LD R1 testFileContents1
	LD R2 $testFileLength1
	; R0 -> File Pointer
	; R0 <- Error code (Nominal 0)
	; R1 -> Buffer to read from
	; R1 <- bytes read
	; R2 -> Amount of bytes to read
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 testFileContents3
	LD R2 $testFileLength3
	CALL vfs_fwrite
	POP R0
	PSH R0
	LD R1 0
	CALL vfs_fseek
	POP R0
	PSH R0
	LD R1 testFileReadBuffer
	LD R2 $testFileReadSize
	CALL vfs_fread
	POP R0
	CALL vfs_fclose
	RET

	testFilePath:
	.ds "/"
	.db 0
	testFileName:
	.ds "tf"
	.dz 12
	testFileLength1:
	.db 10
	testFileContents1:
	.ds "0123456789"
	testFileLength2:
	.db 26
	testFileContents3:
	.ds "abcdefghijklmnopqrstuvwxyz"
	testFileContents2:
	.ds "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	testFileLength3:
	.db 26*2

	testFileReadBuffer:
	.dz 128*3
	testFileReadSize:
	.db 128

CMD_PEEK:
	SUB R0 4
	CLT R0 1
	JMPC CMD_PEEK_NOARG
	; Need to parse in the number given
	; R1 has a pointer to a number string either in decimal or hex
	CALL parseUserNumberInput
	CNZ R0
	JMPC PRINT_CMD_PEEK_ERROR

	; R2 has the address value
	DD R2
	LDD R0
	CALL PrintNumberAtCursor
	CALL CursorNewline
	RET
	CMD_PEEK_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET

	PRINT_CMD_PEEK_ERROR:
		LD R1 STR_SHELL_ERROR_INTPARSE
		CALL PrintErrorMessage
		RET

CMD_POKE:
	SUB R0 4
	CLT R0 1
	JMPC CMD_PEEK_NOARG
	; Need to parse in the number given
	; R1 has a pointer to a number string either in decimal or hex
	CALL parseUserNumberInput
	CNZ R0
	JMPC PRINT_CMD_POKE_ERROR

	DD R1
	LDD R3
	CEZ R3
	JMPC CMD_POKE_NOARG

	INC R1
	PSH R2
	CALL parseUserNumberInput
	CNZ R0
	JMPC PRINT_CMD_POKE_ERROR
	POP R3
	DD R3
	STD R2
	RET
	CMD_POKE_NOARG:
		LD R1 STR_SHELL_ERROR_NOARG
		CALL PrintLineAtCursor
		RET

	PRINT_CMD_POKE_ERROR_2:
		POP R2
	PRINT_CMD_POKE_ERROR:
		LD R1 STR_SHELL_ERROR_INTPARSE
		CALL PrintErrorMessage
		RET

; R1 -> ptr to zero or space terminated number string
; R0 <- error code (Nominal 0)
; R1 <- pointer to where number ended
; R2 <- value
parseUserNumberInput:
	PSH R3
	DD R1
	LDD R2
	CEZ R2
	JMPC parseUserNumberInput_noinput
	CE R2 ' '
	JMPC parseUserNumberInput_noinput
	; First character can either be 0 for 0x or a digit between 1 and 9
	CE R2 '0'
	JMPC parseUserNumberInput_hex

	; Decimal
	DBGC 'D'
	DBGC 0xa
	LD R0 0
	parseUserNumberInput_decimalLoop:
		CEZ R2
		JMPC parseUserNumberInput_decimalDone
		CE R2 ' '
		JMPC parseUserNumberInput_decimalDone
		SUB R2 '0'
		CGT R2 9
		JMPC parseUserNumberInput_nonnumeric
		CALL parseUserNumberInput_SHLbase10
		ADD R2 ; Add the new value to the old value*10

		INC R1
		DD R1
		LDD R2
		JMP parseUserNumberInput_decimalLoop

	parseUserNumberInput_hex:
	INC R1
	DD R1
	LDD R2
	CEZ R2
	JMPC parseUserNumberInput_hex_nevermind_zero
	CE R2 ' '
	JMPC parseUserNumberInput_hex_nevermind_zero
	CNE R2 'x'
	JMPC parseUserNumberInput_unknownbase

	; hex
	DBGC 'H'
	DBGC 0xa
	LD R0 0
	parseUserNumberInput_hex_loop:
		INC R1
		DD R1
		LDD R2
		CEZ R2
		JMPC parseUserNumberInput_hexDone
		CE R2 ' '
		JMPC parseUserNumberInput_hexDone
		SUB R2 '0'
		CGT R2 9
		CALLC parseUserNumberInput_hex_nonnumeric
		SHL R0 4 ; Multiply R0 by 16
		ADD R2 ; Add the new value to the old value*10
		JMP parseUserNumberInput_hex_loop

	parseUserNumberInput_hex_nonnumeric:
		ADD R2 '0'
		SUB R2 'a'
		CLT R2 6 ; a-f
		JMPC parseUserNumberInput_hex_lowercase
		; uppercase or bust
		ADD R2 'a'
		SUB R2 'A'
		CGT R2 5 ; A-F
		JMPC parseUserNumberInput_hex_nonhexchar
		; uppercase
		parseUserNumberInput_hex_lowercase:
		; R2 now holds char value with a being zero
		ADD R2 10
		RET

	parseUserNumberInput_hex_nevermind_zero:
	LD R0 0
	parseUserNumberInput_decimalDone:
	parseUserNumberInput_hexDone:
	STZ R2
	LD R0 0 ; no error
	POP R3
	RET
	; Multiplies R0 by 10
	parseUserNumberInput_SHLbase10:
		PSH R1
		PSH R2
		LD R2 9
		STZ R1
		parseUserNumberInput_SHLbase10_loop:
			ADD R1 ; R0 = R0 + R1
			DEC R2
			CNZ R2
			JMPC parseUserNumberInput_SHLbase10_loop
		POP R2
		POP R1
		RET

	parseUserNumberInput_noinput:
		LD R0 0x0001
		POP R3
		RET
	parseUserNumberInput_nonnumeric:
		LD R0 0x0002
		POP R3
		RET
	parseUserNumberInput_unknownbase:
		LD R0 0x0003
		POP R3
		RET
	parseUserNumberInput_hex_nonhexchar:
		POP R0
		LD R0 0x0004
		POP R3
		RET

; R0 -> error number
; R1 -> error message table
PrintErrorMessage:
	PSH
	PSH R1
	POP R3
	PrintErrorMessage_loop:
		; check if we have the right error
		CEZ R0
		JMPC PrintErrorMessage_found

		; check if current message is 0 (table is exhausted)
		DD R1
		LDD R2
		CEZ R2
		JMPC PrintErrorMessage_notfound

		; skip message
		PrintErrorMessage_skip:
			DD R1
			LDD R2
			INC R1
			CNZ R2
			JMPC PrintErrorMessage_skip


		; decrement error number
		DEC R0

		JMP PrintErrorMessage_loop


	PrintErrorMessage_notfound:
	PSH R3
	POP R1
	PrintErrorMessage_found:
	; R1: pointer to string
	CALL PrintLineAtCursor
	POP
	RET

; Uses none
ScrollScreen:
	PSH R1
	LD R1 $Cursor
	CLT R1 0x41
	POP R1
	JMPC CMD_CLEAR
	PSH
	; LD R1 CharMem
	LD R2 CharMem
	ADD R2 0x40
	LD R3 0x0fc0
	LD R0 $Cursor
	SUB R0 0x40
	PSH R0
	ST 0x0000 $Cursor
	ScrollScreen_Loop:
		DD R2
		LDD R0
		CNZ R0
		JMPC ScrollScreen_Loop_notzero ; Display zeroes as spaces
			; Manually run PrintAtCursor, but split
			; so that we can write a zero but show a space
			LD R1 $Cursor
			ADD R1 CharMem
			DD R1
			STD R0
			LD R0 ' '
			CALL SetAtCursor
			LD R1 $Cursor
			INC R1
			ST R1 $Cursor
		JMP ScrollScreen_Loop_donewithzero
		ScrollScreen_Loop_notzero:
		CALL PrintAtCursor
		ScrollScreen_Loop_donewithzero:
		INC R2
		DEC R3
		CNZ R3
		JMPC ScrollScreen_Loop
	LD R3 0x0040
	LD R0 ' '
	ScrollScreen_Loop2:
		CALL PrintAtCursor
		DEC R3
		CNZ R3
		JMPC ScrollScreen_Loop2
	POP R0
	ST R0 $Cursor
	POP
	RET

; R1 -> Pointer to the absolute string
; R1 <- Pointer to path excluding name
; R2 <- Pointer to 12 character directory name
SplitDirectory:
	PSH R1
	; CALL PrintLineAtCursor

	; R1 is the ptr to argument made absolute

	SplitDirectory_FindEnd:
		DD R1
		INC R1
		LDD R0
		CNZ R0
		JMPC SplitDirectory_FindEnd

	SUB R1 2
	DD R1
	LDD R0
	STD 0

	; R1 now has pointer to end of string
	SplitDirectory_FindLastSlash:
		DEC R1
		DD R1
		LDD R0
		CNE R0 '/'
		JMPC SplitDirectory_FindLastSlash

	INC R1
	PSH R1
	; R1 pointer right after last slash, to folder name in place
	; Stack has pointer to path
	CALL char12

	; Now that we have the new folder name out of the way,
	; Write a zero after the middle slash
	; And use that for the path

	POP R3
	DD R3
	LDD R0
	STD 0


	PSH R1
	POP R2
	POP R1
	RET

; R1 -> Pointer to the absolute string
; R1 <- Pointer to path excluding name
; R2 <- Pointer to 12 character file name
SplitPath:
	PSH R1

	; R1 is the ptr to argument made absolute
	; PSH
	; CALL PrintLineAtCursor
	; POP

	SplitPath_FindEnd:
		DD R1
		INC R1
		LDD R0
		CNZ R0
		JMPC SplitPath_FindEnd

	SUB R1 1
	DD R1
	LDD R0
	STD 0

	; R1 now has pointer to end of string
	SplitPath_FindLastSlash:
		DEC R1
		DD R1
		LDD R0
		CNE R0 '/'
		JMPC SplitPath_FindLastSlash

	INC R1
	PSH R1

	; PSH
	; CALL PrintLineAtCursor
	; POP
	; R1 pointer right after last slash, to folder name in place
	; Stack has pointer to path
	CALL char12

	; Now that we have the new folder name out of the way,
	; Write a zero after the middle slash
	; And use that for the path

	POP R3
	DD R3
	LDD R0
	STD 0


	PSH R1
	POP R2
	POP R1
	RET

; R1 -> pointer to zero terminated path string.
MakeAbsoluteDir:
	PSH R0
	PSH R2
	PSH R3
	
	DD R1
	LDD R0
	CE R0 '/'
	JMPC MakeAbsoluteDir_Almost_Done
	; R1 has pointer to relative string
	; Steps: Copy current into absolute, then copy relative onto absolute, then enforce trailing slash
	LD R2 currentDirectory
	LD R3 absoluteDirectory
	MakeAbsoluteDir_CopyLoop1:
		DD R2
		LDD R0
		DD R3
		STD R0
		INC R2
		INC R3
		CNZ R0
		JMPC MakeAbsoluteDir_CopyLoop1
	DEC R3
	; Now to copy the relative onto the absolute!
	MakeAbsoluteDir_CopyLoop2:
		DD R1
		LDD R0
		DD R3
		STD R0
		INC R1
		INC R3
		CNZ R0
		JMPC MakeAbsoluteDir_CopyLoop2
	; Enforce trailing slash
	DEC R3

	DEC R3 ; Check if the last character is already a slash
	DD R3
	LDD R0
	CE R0 '/'
	JMPC MakeAbsoluteDir_Done
	; If it's not, replace the null with a slash and add another null
	INC R3
	DD R3
	STD '/'
	INC R3
	DD R3
	STD 0

	MakeAbsoluteDir_Done:
	LD R1 absoluteDirectory
	POP R3
	POP R2
	POP R0
	RET

	MakeAbsoluteDir_Almost_Done:
	LD R2 absoluteDirectory
	MakeAbsoluteDir_Almost_Done_Loop:
		DD R1
		LDD R0
		DD R2
		STD R0
		INC R1
		INC R2
		CNZ R0
		JMPC MakeAbsoluteDir_Almost_Done_Loop
	SUB R2 2
	DD R2
	LDD R0
	CE R0 '/'
	JMPC MakeAbsoluteDir_Done ; Trailing slash? Done!
	INC R2
	DD R2
	STD '/'
	INCD
	STD 0
	JMP MakeAbsoluteDir_Done ; Now we've got a trailing slash!

; R1 -> pointer to zero terminated path string.
MakeAbsoluteFile:
	PSH R0
	PSH R2
	PSH R3
	
	DD R1
	LDD R0
	CE R0 '/'
	JMPC MakeAbsoluteFile_Almost_Done
	; R1 has pointer to relative string
	; Steps: Copy current into absolute, then copy relative onto absolute, then enforce no trailing slash
	LD R2 currentDirectory
	LD R3 absoluteDirectory
	MakeAbsoluteFile_CopyLoop1:
		DD R2
		LDD R0
		DD R3
		STD R0
		INC R2
		INC R3
		CNZ R0
		JMPC MakeAbsoluteFile_CopyLoop1
	DEC R3
	; Now to copy the relative onto the absolute!
	MakeAbsoluteFile_CopyLoop2:
		DD R1
		LDD R0
		DD R3
		STD R0
		INC R1
		INC R3
		CNZ R0
		JMPC MakeAbsoluteFile_CopyLoop2
	; Enforce trailing slash
	DEC R3

	DEC R3 ; Check if the last character is already a slash
	DD R3
	LDD R0
	CNE R0 '/'
	JMPC MakeAbsoluteFile_Done
	; If it is, replace the slash with a null
	DD R3
	STD 0

	MakeAbsoluteFile_Done:
	LD R1 absoluteDirectory
	POP R3
	POP R2
	POP R0
	RET

	MakeAbsoluteFile_Almost_Done:
	LD R2 absoluteDirectory
	MakeAbsoluteFile_Almost_Done_Loop:
		DD R1
		LDD R0
		DD R2
		STD R0
		INC R1
		INC R2
		CNZ R0
		JMPC MakeAbsoluteFile_Almost_Done_Loop
	SUB R2 2
	DD R2
	LDD R0
	CNE R0 '/'
	JMPC MakeAbsoluteFile_Done ; Trailing slash? Done!
	STD 0
	JMP MakeAbsoluteFile_Done ; Now we've got a trailing slash!

; R1 -> ptr to 0 terminated string
; R1 <- ptr to malloc'd 12 byte string
char12:
	PSH R0
	PSH R2
	PSH R3
	LD R0 12
	LD R3 12
	CALL malloc
	PSH R0
	; R0 has ptr to new buffer
	; R1 has point to old string
	char12_copyloop:
		DD R1
		LDD R2
		DD R0
		STD R2 ; Copy from one buffer to the other
		INC R0
		INC R1
		DEC R3
		CEZ R3
		JMPC char12_outofroom
		CNZ R2
		JMPC char12_copyloop
	; Now we've hit a zero, fill in the rest with zeroes
	char12_clearloop:
		DD R0
		STD 0 ; Copy from one buffer to the other
		INC R0
		DEC R3
		CNZ R3
		JMPC char12_clearloop

	char12_outofroom:
	POP R1
	POP R3
	POP R2
	POP R0
	RET

; R0 -> Character
ApplyShift:
	PSH R1
	LD R1 $KB_Mods
	AND R1 0b0001
	CEZ R1
	POP R1
	RETC
	SUB R0 32
	ADD R0 ShiftTable
	DD R0
	LDD R0
	RET

; R0 -> State
; R1 -> Modifier Position
SetModifier:
	PSH R0
	LD R0 1
	SHL R1
	NOT R0
	AND R0 $KB_Mods ; Mask out the bit for the specific modifier
	STZ R2
	POP R0
	SHL R1
	ADD R2 ; Add masked to state
	ST R0 $KB_Mods
	RET

CursorNewline:
	PSH R1
	LD R1 $Cursor		; Load the cursor position
	ADD R1 0x0040		; Reset the cursor to the next line
	AND R1 0xffc0
	ST R1 $Cursor

	CLT R1 0x1000
	JMPC CursorNewline_enoughRoom	
		CALL ScrollScreen ; Scroll screen if there isn't enough room
		LD R1 $LastCursor
		SUB R1 0x40
		ST R1 $LastCursor
	CursorNewline_enoughRoom:
	POP R1
	RET

; R0 -> Character
SetAtCursor:
	PSH R1
	ST R0 $0xaf70		; Character
	LD R1 $Cursor
	AND R1 0x003f
	ST R1 $0xaf71		; X Pos
	LD R1 $Cursor
	SHR R1 6
	ST R1 $0xaf72		; Y Pos
	ST Font $0xaf73		; Font Address
	INT 0x5f
	POP R1
	RET

; R0 -> Character
PrintAtCursor:
	PSH R1
	LD R1 $Cursor		; Load the cursor position
	ADD R1 CharMem
	DD R1
	STD R0
	CALL SetAtCursor
	LD R1 $Cursor
	INC R1
	ST R1 $Cursor
	POP R1
	RET

; R0 -> value 
PrintNumberAtCursor:
	PSH R1
	ST 0 $PrintNumberAtCursor_Thousands
	ST 0 $PrintNumberAtCursor_Hundreds
	ST 0 $PrintNumberAtCursor_Tens
	ST 0 $PrintNumberAtCursor_Ones

	PrintNumberAtCursor_ThousandsLoop:
		CLT R0 1000
		JMPC PrintNumberAtCursor_HundredsLoop
		SUB R0 1000
		LD R1 $PrintNumberAtCursor_Thousands
		INC R1
		ST R1 $PrintNumberAtCursor_Thousands
		JMP PrintNumberAtCursor_ThousandsLoop

	PrintNumberAtCursor_HundredsLoop:
		CLT R0 100
		JMPC PrintNumberAtCursor_TensLoop
		SUB R0 100
		LD R1 $PrintNumberAtCursor_Hundreds
		INC R1
		ST R1 $PrintNumberAtCursor_Hundreds
		JMP PrintNumberAtCursor_HundredsLoop

	PrintNumberAtCursor_TensLoop:
		CLT R0 10
		JMPC PrintNumberAtCursor_OnesLoop
		SUB R0 10
		LD R1 $PrintNumberAtCursor_Tens
		INC R1
		ST R1 $PrintNumberAtCursor_Tens
		JMP PrintNumberAtCursor_TensLoop

	PrintNumberAtCursor_OnesLoop:
		CLT R0 1
		JMPC PrintNumberAtCursor_DoneLoops
		SUB R0 1
		LD R1 $PrintNumberAtCursor_Ones
		INC R1
		ST R1 $PrintNumberAtCursor_Ones
		JMP PrintNumberAtCursor_OnesLoop

	PrintNumberAtCursor_DoneLoops:
	LD R0 $PrintNumberAtCursor_Thousands
	ADD R0 '0'
	CALL PrintAtCursor
	LD R0 $PrintNumberAtCursor_Hundreds
	ADD R0 '0'
	CALL PrintAtCursor
	LD R0 $PrintNumberAtCursor_Tens
	ADD R0 '0'
	CALL PrintAtCursor
	LD R0 $PrintNumberAtCursor_Ones
	ADD R0 '0'
	CALL PrintAtCursor
	POP R1
	RET

	PrintNumberAtCursor_Thousands: .db 0
	PrintNumberAtCursor_Hundreds: .db 0
	PrintNumberAtCursor_Tens: .db 0
	PrintNumberAtCursor_Ones: .db 0

; R0 -> length
; R1 -> ptr
PrintBufAtCursor:
	PSH R0
	CEZ R0
	DD R1
	LDD R0
	JMPC PrintBufAtCursorEnd
		PSH R1
		CALL PrintAtCursor
		POP R1
		INC R1
		POP R0
		DEC R0
		JMP PrintBufAtCursor
	PrintBufAtCursorEnd:
		POP R0
		RET

; R1 -> ptr
PrintStringAtCursor:
	DD R1
	LDD R0
	CEZ R0
	JMPC PrintStringAtCursorEnd
		PSH R1
		CE R0 0x0a
		CALLC CursorNewline
		CNE R0 0x0a
		CALLC PrintAtCursor
	POP R1
	INC R1
	JMP PrintStringAtCursor
	PrintStringAtCursorEnd:
		RET

PrintLineAtCursor:
	CALL PrintStringAtCursor
	CALL CursorNewline
	RET

RefreshDisplay:
	ST CharMem $0xaf70
	ST 0 $0xaf71				;; Set the X position to 0
	ST 0 $0xaf72				;; Set the Y position to 0
	ST Font $0xaf73				;; Set the font to the font address
	INT 0x5e
	RET

Timer:				.db 0xffff
Cursor: 			.db 0x0000 ; (ypos, xpos)
LastCursor:			.db 0x0000 ; ^
CommandEnd:			.db 0x0000 ; ^
KB_Mods:			.db 0 ; 0000 0000 0000 win+alt+ctrl+shift

currentDisk: .db 0

currentDirectory:
.ds "/"
.dz (12+1)*8 +1

absoluteDirectory:
.ds "/"
.dz (12+1)*8 +1

startupScript:
.ds "mkdir /bin/"
.db 0

Font:
#INC ./fontGen/font.hex

; Table Format: string0ptr0...string0ptr00
shellExec_Table:
	.ds "ls"
	.db 0
	.db CMD_LS
	.db 0
	.ds "halt"
	.db 0
	.db CMD_HALT
	.db 0
	.ds "exit"
	.db 0
	.db CMD_HALT
	.db 0
	.ds "mkdir"
	.db 0
	.db CMD_MKDIR
	.db 0
	.ds "rmdir"
	.db 0
	.db CMD_RMDIR
	.db 0
	.ds "clear"
	.db 0
	.db CMD_CLEAR
	.db 0
	.ds "cd"
	.db 0
	.db CMD_CD
	.db 0
	.ds "echo"
	.db 0
	.db CMD_ECHO
	.db 0
	.ds "pwd"
	.db 0
	.db CMD_PWD
	.db 0
	.ds "touch"
	.db 0
	.db CMD_TOUCH
	.db 0
	.ds "rm"
	.db 0
	.db CMD_RM
	.db 0
	.ds "tf"
	.db 0
	.db CMD_TESTFILE
	.db 0
	.ds "cat"
	.db 0
	.db CMD_CAT
	.db 0
	.ds "stat"
	.db 0
	.db CMD_STAT
	.db 0
	.ds "peek"
	.db 0
	.db CMD_PEEK
	.db 0
	.ds "poke"
	.db 0
	.db CMD_POKE
	.db 0
	.db 0

ShiftTable:
	.ds "       "    <_>?)!@#$%^&*( : +  "
	.ds "                           {|}  "
	.ds "~ABCDEFGHIJKLMNOPQRSTUVWXYZ     "

CharMem:
	.ds ">"
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.ds "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz="
	.db 0

; #DEF RAMDISKSIZE 0x1000
#DEF RAMDISKSIZE 512
RAMDISK: .dz RAMDISKSIZE
.ds "IMPORTANT"